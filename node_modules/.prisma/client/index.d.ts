
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AppUser
 * 
 */
export type AppUser = $Result.DefaultSelection<Prisma.$AppUserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model CompanyMember
 * 
 */
export type CompanyMember = $Result.DefaultSelection<Prisma.$CompanyMemberPayload>
/**
 * Model CompanyDocument
 * 
 */
export type CompanyDocument = $Result.DefaultSelection<Prisma.$CompanyDocumentPayload>
/**
 * Model Licitacao
 * 
 */
export type Licitacao = $Result.DefaultSelection<Prisma.$LicitacaoPayload>
/**
 * Model LicitacaoDocument
 * 
 */
export type LicitacaoDocument = $Result.DefaultSelection<Prisma.$LicitacaoDocumentPayload>
/**
 * Model LicitacaoEvent
 * 
 */
export type LicitacaoEvent = $Result.DefaultSelection<Prisma.$LicitacaoEventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleCompany: {
  owner: 'owner',
  admin: 'admin',
  member: 'member'
};

export type RoleCompany = (typeof RoleCompany)[keyof typeof RoleCompany]


export const CompanyDocType: {
  cnpj: 'cnpj',
  certidao: 'certidao',
  procuracao: 'procuracao',
  outro: 'outro'
};

export type CompanyDocType = (typeof CompanyDocType)[keyof typeof CompanyDocType]


export const LicitacaoStatus: {
  draft: 'draft',
  open: 'open',
  closed: 'closed',
  cancelled: 'cancelled',
  awarded: 'awarded'
};

export type LicitacaoStatus = (typeof LicitacaoStatus)[keyof typeof LicitacaoStatus]


export const LicitacaoDocType: {
  proposta: 'proposta',
  habilitacao: 'habilitacao',
  contrato: 'contrato',
  outro: 'outro'
};

export type LicitacaoDocType = (typeof LicitacaoDocType)[keyof typeof LicitacaoDocType]

}

export type RoleCompany = $Enums.RoleCompany

export const RoleCompany: typeof $Enums.RoleCompany

export type CompanyDocType = $Enums.CompanyDocType

export const CompanyDocType: typeof $Enums.CompanyDocType

export type LicitacaoStatus = $Enums.LicitacaoStatus

export const LicitacaoStatus: typeof $Enums.LicitacaoStatus

export type LicitacaoDocType = $Enums.LicitacaoDocType

export const LicitacaoDocType: typeof $Enums.LicitacaoDocType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AppUsers
 * const appUsers = await prisma.appUser.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AppUsers
   * const appUsers = await prisma.appUser.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.appUser`: Exposes CRUD operations for the **AppUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppUsers
    * const appUsers = await prisma.appUser.findMany()
    * ```
    */
  get appUser(): Prisma.AppUserDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.companyMember`: Exposes CRUD operations for the **CompanyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyMembers
    * const companyMembers = await prisma.companyMember.findMany()
    * ```
    */
  get companyMember(): Prisma.CompanyMemberDelegate<ExtArgs>;

  /**
   * `prisma.companyDocument`: Exposes CRUD operations for the **CompanyDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyDocuments
    * const companyDocuments = await prisma.companyDocument.findMany()
    * ```
    */
  get companyDocument(): Prisma.CompanyDocumentDelegate<ExtArgs>;

  /**
   * `prisma.licitacao`: Exposes CRUD operations for the **Licitacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Licitacaos
    * const licitacaos = await prisma.licitacao.findMany()
    * ```
    */
  get licitacao(): Prisma.LicitacaoDelegate<ExtArgs>;

  /**
   * `prisma.licitacaoDocument`: Exposes CRUD operations for the **LicitacaoDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LicitacaoDocuments
    * const licitacaoDocuments = await prisma.licitacaoDocument.findMany()
    * ```
    */
  get licitacaoDocument(): Prisma.LicitacaoDocumentDelegate<ExtArgs>;

  /**
   * `prisma.licitacaoEvent`: Exposes CRUD operations for the **LicitacaoEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LicitacaoEvents
    * const licitacaoEvents = await prisma.licitacaoEvent.findMany()
    * ```
    */
  get licitacaoEvent(): Prisma.LicitacaoEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AppUser: 'AppUser',
    Company: 'Company',
    CompanyMember: 'CompanyMember',
    CompanyDocument: 'CompanyDocument',
    Licitacao: 'Licitacao',
    LicitacaoDocument: 'LicitacaoDocument',
    LicitacaoEvent: 'LicitacaoEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "appUser" | "company" | "companyMember" | "companyDocument" | "licitacao" | "licitacaoDocument" | "licitacaoEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AppUser: {
        payload: Prisma.$AppUserPayload<ExtArgs>
        fields: Prisma.AppUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          findFirst: {
            args: Prisma.AppUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          findMany: {
            args: Prisma.AppUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>[]
          }
          create: {
            args: Prisma.AppUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          createMany: {
            args: Prisma.AppUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>[]
          }
          delete: {
            args: Prisma.AppUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          update: {
            args: Prisma.AppUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          deleteMany: {
            args: Prisma.AppUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          aggregate: {
            args: Prisma.AppUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppUser>
          }
          groupBy: {
            args: Prisma.AppUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppUserCountArgs<ExtArgs>
            result: $Utils.Optional<AppUserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      CompanyMember: {
        payload: Prisma.$CompanyMemberPayload<ExtArgs>
        fields: Prisma.CompanyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findFirst: {
            args: Prisma.CompanyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findMany: {
            args: Prisma.CompanyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          create: {
            args: Prisma.CompanyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          createMany: {
            args: Prisma.CompanyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          delete: {
            args: Prisma.CompanyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          update: {
            args: Prisma.CompanyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          deleteMany: {
            args: Prisma.CompanyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          aggregate: {
            args: Prisma.CompanyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyMember>
          }
          groupBy: {
            args: Prisma.CompanyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberCountAggregateOutputType> | number
          }
        }
      }
      CompanyDocument: {
        payload: Prisma.$CompanyDocumentPayload<ExtArgs>
        fields: Prisma.CompanyDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          findFirst: {
            args: Prisma.CompanyDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          findMany: {
            args: Prisma.CompanyDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>[]
          }
          create: {
            args: Prisma.CompanyDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          createMany: {
            args: Prisma.CompanyDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>[]
          }
          delete: {
            args: Prisma.CompanyDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          update: {
            args: Prisma.CompanyDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyDocumentPayload>
          }
          aggregate: {
            args: Prisma.CompanyDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyDocument>
          }
          groupBy: {
            args: Prisma.CompanyDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyDocumentCountAggregateOutputType> | number
          }
        }
      }
      Licitacao: {
        payload: Prisma.$LicitacaoPayload<ExtArgs>
        fields: Prisma.LicitacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicitacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicitacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          findFirst: {
            args: Prisma.LicitacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicitacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          findMany: {
            args: Prisma.LicitacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>[]
          }
          create: {
            args: Prisma.LicitacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          createMany: {
            args: Prisma.LicitacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LicitacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>[]
          }
          delete: {
            args: Prisma.LicitacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          update: {
            args: Prisma.LicitacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          deleteMany: {
            args: Prisma.LicitacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicitacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LicitacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoPayload>
          }
          aggregate: {
            args: Prisma.LicitacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicitacao>
          }
          groupBy: {
            args: Prisma.LicitacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicitacaoCountArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoCountAggregateOutputType> | number
          }
        }
      }
      LicitacaoDocument: {
        payload: Prisma.$LicitacaoDocumentPayload<ExtArgs>
        fields: Prisma.LicitacaoDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicitacaoDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicitacaoDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          findFirst: {
            args: Prisma.LicitacaoDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicitacaoDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          findMany: {
            args: Prisma.LicitacaoDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>[]
          }
          create: {
            args: Prisma.LicitacaoDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          createMany: {
            args: Prisma.LicitacaoDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LicitacaoDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>[]
          }
          delete: {
            args: Prisma.LicitacaoDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          update: {
            args: Prisma.LicitacaoDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          deleteMany: {
            args: Prisma.LicitacaoDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicitacaoDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LicitacaoDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoDocumentPayload>
          }
          aggregate: {
            args: Prisma.LicitacaoDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicitacaoDocument>
          }
          groupBy: {
            args: Prisma.LicitacaoDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicitacaoDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoDocumentCountAggregateOutputType> | number
          }
        }
      }
      LicitacaoEvent: {
        payload: Prisma.$LicitacaoEventPayload<ExtArgs>
        fields: Prisma.LicitacaoEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicitacaoEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicitacaoEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          findFirst: {
            args: Prisma.LicitacaoEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicitacaoEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          findMany: {
            args: Prisma.LicitacaoEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>[]
          }
          create: {
            args: Prisma.LicitacaoEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          createMany: {
            args: Prisma.LicitacaoEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LicitacaoEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>[]
          }
          delete: {
            args: Prisma.LicitacaoEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          update: {
            args: Prisma.LicitacaoEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          deleteMany: {
            args: Prisma.LicitacaoEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicitacaoEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LicitacaoEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicitacaoEventPayload>
          }
          aggregate: {
            args: Prisma.LicitacaoEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicitacaoEvent>
          }
          groupBy: {
            args: Prisma.LicitacaoEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicitacaoEventCountArgs<ExtArgs>
            result: $Utils.Optional<LicitacaoEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AppUserCountOutputType
   */

  export type AppUserCountOutputType = {
    createdCompanies: number
    memberships: number
    events: number
  }

  export type AppUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCompanies?: boolean | AppUserCountOutputTypeCountCreatedCompaniesArgs
    memberships?: boolean | AppUserCountOutputTypeCountMembershipsArgs
    events?: boolean | AppUserCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUserCountOutputType
     */
    select?: AppUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountCreatedCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoEventWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    members: number
    documents: number
    licitacoes: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | CompanyCountOutputTypeCountMembersArgs
    documents?: boolean | CompanyCountOutputTypeCountDocumentsArgs
    licitacoes?: boolean | CompanyCountOutputTypeCountLicitacoesArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyDocumentWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountLicitacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoWhereInput
  }


  /**
   * Count Type LicitacaoCountOutputType
   */

  export type LicitacaoCountOutputType = {
    documents: number
    events: number
  }

  export type LicitacaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | LicitacaoCountOutputTypeCountDocumentsArgs
    events?: boolean | LicitacaoCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * LicitacaoCountOutputType without action
   */
  export type LicitacaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoCountOutputType
     */
    select?: LicitacaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LicitacaoCountOutputType without action
   */
  export type LicitacaoCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoDocumentWhereInput
  }

  /**
   * LicitacaoCountOutputType without action
   */
  export type LicitacaoCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AppUser
   */

  export type AggregateAppUser = {
    _count: AppUserCountAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  export type AppUserMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppUserMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppUserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    passwordHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppUserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppUserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppUserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppUser to aggregate.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppUsers
    **/
    _count?: true | AppUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppUserMaxAggregateInputType
  }

  export type GetAppUserAggregateType<T extends AppUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAppUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppUser[P]>
      : GetScalarType<T[P], AggregateAppUser[P]>
  }




  export type AppUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppUserWhereInput
    orderBy?: AppUserOrderByWithAggregationInput | AppUserOrderByWithAggregationInput[]
    by: AppUserScalarFieldEnum[] | AppUserScalarFieldEnum
    having?: AppUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppUserCountAggregateInputType | true
    _min?: AppUserMinAggregateInputType
    _max?: AppUserMaxAggregateInputType
  }

  export type AppUserGroupByOutputType = {
    id: string
    fullName: string | null
    email: string
    passwordHash: string
    createdAt: Date
    updatedAt: Date
    _count: AppUserCountAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  type GetAppUserGroupByPayload<T extends AppUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppUserGroupByOutputType[P]>
            : GetScalarType<T[P], AppUserGroupByOutputType[P]>
        }
      >
    >


  export type AppUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdCompanies?: boolean | AppUser$createdCompaniesArgs<ExtArgs>
    memberships?: boolean | AppUser$membershipsArgs<ExtArgs>
    events?: boolean | AppUser$eventsArgs<ExtArgs>
    _count?: boolean | AppUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appUser"]>

  export type AppUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appUser"]>

  export type AppUserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCompanies?: boolean | AppUser$createdCompaniesArgs<ExtArgs>
    memberships?: boolean | AppUser$membershipsArgs<ExtArgs>
    events?: boolean | AppUser$eventsArgs<ExtArgs>
    _count?: boolean | AppUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AppUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppUser"
    objects: {
      createdCompanies: Prisma.$CompanyPayload<ExtArgs>[]
      memberships: Prisma.$CompanyMemberPayload<ExtArgs>[]
      events: Prisma.$LicitacaoEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string | null
      email: string
      passwordHash: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appUser"]>
    composites: {}
  }

  type AppUserGetPayload<S extends boolean | null | undefined | AppUserDefaultArgs> = $Result.GetResult<Prisma.$AppUserPayload, S>

  type AppUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppUserCountAggregateInputType | true
    }

  export interface AppUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppUser'], meta: { name: 'AppUser' } }
    /**
     * Find zero or one AppUser that matches the filter.
     * @param {AppUserFindUniqueArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppUserFindUniqueArgs>(args: SelectSubset<T, AppUserFindUniqueArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AppUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppUserFindUniqueOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppUserFindUniqueOrThrowArgs>(args: SelectSubset<T, AppUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AppUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppUserFindFirstArgs>(args?: SelectSubset<T, AppUserFindFirstArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AppUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppUserFindFirstOrThrowArgs>(args?: SelectSubset<T, AppUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AppUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppUsers
     * const appUsers = await prisma.appUser.findMany()
     * 
     * // Get first 10 AppUsers
     * const appUsers = await prisma.appUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appUserWithIdOnly = await prisma.appUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppUserFindManyArgs>(args?: SelectSubset<T, AppUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AppUser.
     * @param {AppUserCreateArgs} args - Arguments to create a AppUser.
     * @example
     * // Create one AppUser
     * const AppUser = await prisma.appUser.create({
     *   data: {
     *     // ... data to create a AppUser
     *   }
     * })
     * 
     */
    create<T extends AppUserCreateArgs>(args: SelectSubset<T, AppUserCreateArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AppUsers.
     * @param {AppUserCreateManyArgs} args - Arguments to create many AppUsers.
     * @example
     * // Create many AppUsers
     * const appUser = await prisma.appUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppUserCreateManyArgs>(args?: SelectSubset<T, AppUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppUsers and returns the data saved in the database.
     * @param {AppUserCreateManyAndReturnArgs} args - Arguments to create many AppUsers.
     * @example
     * // Create many AppUsers
     * const appUser = await prisma.appUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppUsers and only return the `id`
     * const appUserWithIdOnly = await prisma.appUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppUserCreateManyAndReturnArgs>(args?: SelectSubset<T, AppUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AppUser.
     * @param {AppUserDeleteArgs} args - Arguments to delete one AppUser.
     * @example
     * // Delete one AppUser
     * const AppUser = await prisma.appUser.delete({
     *   where: {
     *     // ... filter to delete one AppUser
     *   }
     * })
     * 
     */
    delete<T extends AppUserDeleteArgs>(args: SelectSubset<T, AppUserDeleteArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AppUser.
     * @param {AppUserUpdateArgs} args - Arguments to update one AppUser.
     * @example
     * // Update one AppUser
     * const appUser = await prisma.appUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppUserUpdateArgs>(args: SelectSubset<T, AppUserUpdateArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AppUsers.
     * @param {AppUserDeleteManyArgs} args - Arguments to filter AppUsers to delete.
     * @example
     * // Delete a few AppUsers
     * const { count } = await prisma.appUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppUserDeleteManyArgs>(args?: SelectSubset<T, AppUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppUsers
     * const appUser = await prisma.appUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppUserUpdateManyArgs>(args: SelectSubset<T, AppUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppUser.
     * @param {AppUserUpsertArgs} args - Arguments to update or create a AppUser.
     * @example
     * // Update or create a AppUser
     * const appUser = await prisma.appUser.upsert({
     *   create: {
     *     // ... data to create a AppUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppUser we want to update
     *   }
     * })
     */
    upsert<T extends AppUserUpsertArgs>(args: SelectSubset<T, AppUserUpsertArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserCountArgs} args - Arguments to filter AppUsers to count.
     * @example
     * // Count the number of AppUsers
     * const count = await prisma.appUser.count({
     *   where: {
     *     // ... the filter for the AppUsers we want to count
     *   }
     * })
    **/
    count<T extends AppUserCountArgs>(
      args?: Subset<T, AppUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppUserAggregateArgs>(args: Subset<T, AppUserAggregateArgs>): Prisma.PrismaPromise<GetAppUserAggregateType<T>>

    /**
     * Group by AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppUserGroupByArgs['orderBy'] }
        : { orderBy?: AppUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppUser model
   */
  readonly fields: AppUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdCompanies<T extends AppUser$createdCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$createdCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    memberships<T extends AppUser$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends AppUser$eventsArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppUser model
   */ 
  interface AppUserFieldRefs {
    readonly id: FieldRef<"AppUser", 'String'>
    readonly fullName: FieldRef<"AppUser", 'String'>
    readonly email: FieldRef<"AppUser", 'String'>
    readonly passwordHash: FieldRef<"AppUser", 'String'>
    readonly createdAt: FieldRef<"AppUser", 'DateTime'>
    readonly updatedAt: FieldRef<"AppUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppUser findUnique
   */
  export type AppUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser findUniqueOrThrow
   */
  export type AppUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser findFirst
   */
  export type AppUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppUsers.
     */
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser findFirstOrThrow
   */
  export type AppUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppUsers.
     */
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser findMany
   */
  export type AppUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUsers to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser create
   */
  export type AppUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The data needed to create a AppUser.
     */
    data: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
  }

  /**
   * AppUser createMany
   */
  export type AppUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppUsers.
     */
    data: AppUserCreateManyInput | AppUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppUser createManyAndReturn
   */
  export type AppUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AppUsers.
     */
    data: AppUserCreateManyInput | AppUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppUser update
   */
  export type AppUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The data needed to update a AppUser.
     */
    data: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
    /**
     * Choose, which AppUser to update.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser updateMany
   */
  export type AppUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppUsers.
     */
    data: XOR<AppUserUpdateManyMutationInput, AppUserUncheckedUpdateManyInput>
    /**
     * Filter which AppUsers to update
     */
    where?: AppUserWhereInput
  }

  /**
   * AppUser upsert
   */
  export type AppUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The filter to search for the AppUser to update in case it exists.
     */
    where: AppUserWhereUniqueInput
    /**
     * In case the AppUser found by the `where` argument doesn't exist, create a new AppUser with this data.
     */
    create: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
    /**
     * In case the AppUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
  }

  /**
   * AppUser delete
   */
  export type AppUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter which AppUser to delete.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser deleteMany
   */
  export type AppUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppUsers to delete
     */
    where?: AppUserWhereInput
  }

  /**
   * AppUser.createdCompanies
   */
  export type AppUser$createdCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * AppUser.memberships
   */
  export type AppUser$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * AppUser.events
   */
  export type AppUser$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    where?: LicitacaoEventWhereInput
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    cursor?: LicitacaoEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicitacaoEventScalarFieldEnum | LicitacaoEventScalarFieldEnum[]
  }

  /**
   * AppUser without action
   */
  export type AppUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    cnpj: string | null
    phone: string | null
    address: string | null
    logoPath: string | null
    letterheadPath: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    cnpj: string | null
    phone: string | null
    address: string | null
    logoPath: string | null
    letterheadPath: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    cnpj: number
    phone: number
    address: number
    logoPath: number
    letterheadPath: number
    active: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    phone?: true
    address?: true
    logoPath?: true
    letterheadPath?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    phone?: true
    address?: true
    logoPath?: true
    letterheadPath?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    phone?: true
    address?: true
    logoPath?: true
    letterheadPath?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    cnpj: string | null
    phone: string | null
    address: string | null
    logoPath: string | null
    letterheadPath: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    createdById: string
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cnpj?: boolean
    phone?: boolean
    address?: boolean
    logoPath?: boolean
    letterheadPath?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | AppUserDefaultArgs<ExtArgs>
    members?: boolean | Company$membersArgs<ExtArgs>
    documents?: boolean | Company$documentsArgs<ExtArgs>
    licitacoes?: boolean | Company$licitacoesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cnpj?: boolean
    phone?: boolean
    address?: boolean
    logoPath?: boolean
    letterheadPath?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    cnpj?: boolean
    phone?: boolean
    address?: boolean
    logoPath?: boolean
    letterheadPath?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | AppUserDefaultArgs<ExtArgs>
    members?: boolean | Company$membersArgs<ExtArgs>
    documents?: boolean | Company$documentsArgs<ExtArgs>
    licitacoes?: boolean | Company$licitacoesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | AppUserDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      createdBy: Prisma.$AppUserPayload<ExtArgs>
      members: Prisma.$CompanyMemberPayload<ExtArgs>[]
      documents: Prisma.$CompanyDocumentPayload<ExtArgs>[]
      licitacoes: Prisma.$LicitacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      cnpj: string | null
      phone: string | null
      address: string | null
      logoPath: string | null
      letterheadPath: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
      createdById: string
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    members<T extends Company$membersArgs<ExtArgs> = {}>(args?: Subset<T, Company$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Company$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Company$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    licitacoes<T extends Company$licitacoesArgs<ExtArgs> = {}>(args?: Subset<T, Company$licitacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly cnpj: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly logoPath: FieldRef<"Company", 'String'>
    readonly letterheadPath: FieldRef<"Company", 'String'>
    readonly active: FieldRef<"Company", 'Boolean'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly createdById: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.members
   */
  export type Company$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * Company.documents
   */
  export type Company$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    where?: CompanyDocumentWhereInput
    orderBy?: CompanyDocumentOrderByWithRelationInput | CompanyDocumentOrderByWithRelationInput[]
    cursor?: CompanyDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyDocumentScalarFieldEnum | CompanyDocumentScalarFieldEnum[]
  }

  /**
   * Company.licitacoes
   */
  export type Company$licitacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    where?: LicitacaoWhereInput
    orderBy?: LicitacaoOrderByWithRelationInput | LicitacaoOrderByWithRelationInput[]
    cursor?: LicitacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicitacaoScalarFieldEnum | LicitacaoScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model CompanyMember
   */

  export type AggregateCompanyMember = {
    _count: CompanyMemberCountAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  export type CompanyMemberMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    role: $Enums.RoleCompany | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMemberMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    role: $Enums.RoleCompany | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMemberCountAggregateOutputType = {
    id: number
    companyId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMemberMinAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMemberMaxAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMemberCountAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMember to aggregate.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyMembers
    **/
    _count?: true | CompanyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type GetCompanyMemberAggregateType<T extends CompanyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyMember[P]>
      : GetScalarType<T[P], AggregateCompanyMember[P]>
  }




  export type CompanyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithAggregationInput | CompanyMemberOrderByWithAggregationInput[]
    by: CompanyMemberScalarFieldEnum[] | CompanyMemberScalarFieldEnum
    having?: CompanyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyMemberCountAggregateInputType | true
    _min?: CompanyMemberMinAggregateInputType
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type CompanyMemberGroupByOutputType = {
    id: string
    companyId: string
    userId: string
    role: $Enums.RoleCompany
    createdAt: Date
    updatedAt: Date
    _count: CompanyMemberCountAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  type GetCompanyMemberGroupByPayload<T extends CompanyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
        }
      >
    >


  export type CompanyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectScalar = {
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | AppUserDefaultArgs<ExtArgs>
  }
  export type CompanyMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | AppUserDefaultArgs<ExtArgs>
  }

  export type $CompanyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyMember"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user: Prisma.$AppUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      userId: string
      role: $Enums.RoleCompany
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyMember"]>
    composites: {}
  }

  type CompanyMemberGetPayload<S extends boolean | null | undefined | CompanyMemberDefaultArgs> = $Result.GetResult<Prisma.$CompanyMemberPayload, S>

  type CompanyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyMemberCountAggregateInputType | true
    }

  export interface CompanyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyMember'], meta: { name: 'CompanyMember' } }
    /**
     * Find zero or one CompanyMember that matches the filter.
     * @param {CompanyMemberFindUniqueArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyMemberFindUniqueArgs>(args: SelectSubset<T, CompanyMemberFindUniqueArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompanyMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyMemberFindUniqueOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompanyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyMemberFindFirstArgs>(args?: SelectSubset<T, CompanyMemberFindFirstArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompanyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompanyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany()
     * 
     * // Get first 10 CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyMemberFindManyArgs>(args?: SelectSubset<T, CompanyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompanyMember.
     * @param {CompanyMemberCreateArgs} args - Arguments to create a CompanyMember.
     * @example
     * // Create one CompanyMember
     * const CompanyMember = await prisma.companyMember.create({
     *   data: {
     *     // ... data to create a CompanyMember
     *   }
     * })
     * 
     */
    create<T extends CompanyMemberCreateArgs>(args: SelectSubset<T, CompanyMemberCreateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompanyMembers.
     * @param {CompanyMemberCreateManyArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyMemberCreateManyArgs>(args?: SelectSubset<T, CompanyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyMembers and returns the data saved in the database.
     * @param {CompanyMemberCreateManyAndReturnArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyMembers and only return the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompanyMember.
     * @param {CompanyMemberDeleteArgs} args - Arguments to delete one CompanyMember.
     * @example
     * // Delete one CompanyMember
     * const CompanyMember = await prisma.companyMember.delete({
     *   where: {
     *     // ... filter to delete one CompanyMember
     *   }
     * })
     * 
     */
    delete<T extends CompanyMemberDeleteArgs>(args: SelectSubset<T, CompanyMemberDeleteArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompanyMember.
     * @param {CompanyMemberUpdateArgs} args - Arguments to update one CompanyMember.
     * @example
     * // Update one CompanyMember
     * const companyMember = await prisma.companyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyMemberUpdateArgs>(args: SelectSubset<T, CompanyMemberUpdateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompanyMembers.
     * @param {CompanyMemberDeleteManyArgs} args - Arguments to filter CompanyMembers to delete.
     * @example
     * // Delete a few CompanyMembers
     * const { count } = await prisma.companyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyMemberDeleteManyArgs>(args?: SelectSubset<T, CompanyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyMembers
     * const companyMember = await prisma.companyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyMemberUpdateManyArgs>(args: SelectSubset<T, CompanyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyMember.
     * @param {CompanyMemberUpsertArgs} args - Arguments to update or create a CompanyMember.
     * @example
     * // Update or create a CompanyMember
     * const companyMember = await prisma.companyMember.upsert({
     *   create: {
     *     // ... data to create a CompanyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyMember we want to update
     *   }
     * })
     */
    upsert<T extends CompanyMemberUpsertArgs>(args: SelectSubset<T, CompanyMemberUpsertArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberCountArgs} args - Arguments to filter CompanyMembers to count.
     * @example
     * // Count the number of CompanyMembers
     * const count = await prisma.companyMember.count({
     *   where: {
     *     // ... the filter for the CompanyMembers we want to count
     *   }
     * })
    **/
    count<T extends CompanyMemberCountArgs>(
      args?: Subset<T, CompanyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyMemberAggregateArgs>(args: Subset<T, CompanyMemberAggregateArgs>): Prisma.PrismaPromise<GetCompanyMemberAggregateType<T>>

    /**
     * Group by CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyMemberGroupByArgs['orderBy'] }
        : { orderBy?: CompanyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyMember model
   */
  readonly fields: CompanyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyMember model
   */ 
  interface CompanyMemberFieldRefs {
    readonly id: FieldRef<"CompanyMember", 'String'>
    readonly companyId: FieldRef<"CompanyMember", 'String'>
    readonly userId: FieldRef<"CompanyMember", 'String'>
    readonly role: FieldRef<"CompanyMember", 'RoleCompany'>
    readonly createdAt: FieldRef<"CompanyMember", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyMember findUnique
   */
  export type CompanyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findUniqueOrThrow
   */
  export type CompanyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findFirst
   */
  export type CompanyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findFirstOrThrow
   */
  export type CompanyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findMany
   */
  export type CompanyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMembers to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember create
   */
  export type CompanyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyMember.
     */
    data: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
  }

  /**
   * CompanyMember createMany
   */
  export type CompanyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyMember createManyAndReturn
   */
  export type CompanyMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMember update
   */
  export type CompanyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyMember.
     */
    data: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
    /**
     * Choose, which CompanyMember to update.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember updateMany
   */
  export type CompanyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyMembers.
     */
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMembers to update
     */
    where?: CompanyMemberWhereInput
  }

  /**
   * CompanyMember upsert
   */
  export type CompanyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyMember to update in case it exists.
     */
    where: CompanyMemberWhereUniqueInput
    /**
     * In case the CompanyMember found by the `where` argument doesn't exist, create a new CompanyMember with this data.
     */
    create: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
    /**
     * In case the CompanyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
  }

  /**
   * CompanyMember delete
   */
  export type CompanyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter which CompanyMember to delete.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember deleteMany
   */
  export type CompanyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMembers to delete
     */
    where?: CompanyMemberWhereInput
  }

  /**
   * CompanyMember without action
   */
  export type CompanyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
  }


  /**
   * Model CompanyDocument
   */

  export type AggregateCompanyDocument = {
    _count: CompanyDocumentCountAggregateOutputType | null
    _avg: CompanyDocumentAvgAggregateOutputType | null
    _sum: CompanyDocumentSumAggregateOutputType | null
    _min: CompanyDocumentMinAggregateOutputType | null
    _max: CompanyDocumentMaxAggregateOutputType | null
  }

  export type CompanyDocumentAvgAggregateOutputType = {
    version: number | null
  }

  export type CompanyDocumentSumAggregateOutputType = {
    version: number | null
  }

  export type CompanyDocumentMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    docType: $Enums.CompanyDocType | null
    docNumber: string | null
    issuer: string | null
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    notes: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyDocumentMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    docType: $Enums.CompanyDocType | null
    docNumber: string | null
    issuer: string | null
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    notes: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyDocumentCountAggregateOutputType = {
    id: number
    companyId: number
    docType: number
    docNumber: number
    issuer: number
    issueDate: number
    expiresAt: number
    filePath: number
    notes: number
    version: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyDocumentAvgAggregateInputType = {
    version?: true
  }

  export type CompanyDocumentSumAggregateInputType = {
    version?: true
  }

  export type CompanyDocumentMinAggregateInputType = {
    id?: true
    companyId?: true
    docType?: true
    docNumber?: true
    issuer?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    notes?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyDocumentMaxAggregateInputType = {
    id?: true
    companyId?: true
    docType?: true
    docNumber?: true
    issuer?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    notes?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyDocumentCountAggregateInputType = {
    id?: true
    companyId?: true
    docType?: true
    docNumber?: true
    issuer?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    notes?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyDocument to aggregate.
     */
    where?: CompanyDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyDocuments to fetch.
     */
    orderBy?: CompanyDocumentOrderByWithRelationInput | CompanyDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyDocuments
    **/
    _count?: true | CompanyDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyDocumentMaxAggregateInputType
  }

  export type GetCompanyDocumentAggregateType<T extends CompanyDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyDocument[P]>
      : GetScalarType<T[P], AggregateCompanyDocument[P]>
  }




  export type CompanyDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyDocumentWhereInput
    orderBy?: CompanyDocumentOrderByWithAggregationInput | CompanyDocumentOrderByWithAggregationInput[]
    by: CompanyDocumentScalarFieldEnum[] | CompanyDocumentScalarFieldEnum
    having?: CompanyDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyDocumentCountAggregateInputType | true
    _avg?: CompanyDocumentAvgAggregateInputType
    _sum?: CompanyDocumentSumAggregateInputType
    _min?: CompanyDocumentMinAggregateInputType
    _max?: CompanyDocumentMaxAggregateInputType
  }

  export type CompanyDocumentGroupByOutputType = {
    id: string
    companyId: string
    docType: $Enums.CompanyDocType
    docNumber: string | null
    issuer: string | null
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    notes: string | null
    version: number
    createdAt: Date
    updatedAt: Date
    _count: CompanyDocumentCountAggregateOutputType | null
    _avg: CompanyDocumentAvgAggregateOutputType | null
    _sum: CompanyDocumentSumAggregateOutputType | null
    _min: CompanyDocumentMinAggregateOutputType | null
    _max: CompanyDocumentMaxAggregateOutputType | null
  }

  type GetCompanyDocumentGroupByPayload<T extends CompanyDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyDocumentGroupByOutputType[P]>
        }
      >
    >


  export type CompanyDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    docType?: boolean
    docNumber?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    notes?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyDocument"]>

  export type CompanyDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    docType?: boolean
    docNumber?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    notes?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyDocument"]>

  export type CompanyDocumentSelectScalar = {
    id?: boolean
    companyId?: boolean
    docType?: boolean
    docNumber?: boolean
    issuer?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    notes?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanyDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanyDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyDocument"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      docType: $Enums.CompanyDocType
      docNumber: string | null
      issuer: string | null
      issueDate: Date | null
      expiresAt: Date | null
      filePath: string | null
      notes: string | null
      version: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyDocument"]>
    composites: {}
  }

  type CompanyDocumentGetPayload<S extends boolean | null | undefined | CompanyDocumentDefaultArgs> = $Result.GetResult<Prisma.$CompanyDocumentPayload, S>

  type CompanyDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyDocumentCountAggregateInputType | true
    }

  export interface CompanyDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyDocument'], meta: { name: 'CompanyDocument' } }
    /**
     * Find zero or one CompanyDocument that matches the filter.
     * @param {CompanyDocumentFindUniqueArgs} args - Arguments to find a CompanyDocument
     * @example
     * // Get one CompanyDocument
     * const companyDocument = await prisma.companyDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyDocumentFindUniqueArgs>(args: SelectSubset<T, CompanyDocumentFindUniqueArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompanyDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyDocumentFindUniqueOrThrowArgs} args - Arguments to find a CompanyDocument
     * @example
     * // Get one CompanyDocument
     * const companyDocument = await prisma.companyDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompanyDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentFindFirstArgs} args - Arguments to find a CompanyDocument
     * @example
     * // Get one CompanyDocument
     * const companyDocument = await prisma.companyDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyDocumentFindFirstArgs>(args?: SelectSubset<T, CompanyDocumentFindFirstArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompanyDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentFindFirstOrThrowArgs} args - Arguments to find a CompanyDocument
     * @example
     * // Get one CompanyDocument
     * const companyDocument = await prisma.companyDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompanyDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyDocuments
     * const companyDocuments = await prisma.companyDocument.findMany()
     * 
     * // Get first 10 CompanyDocuments
     * const companyDocuments = await prisma.companyDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyDocumentWithIdOnly = await prisma.companyDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyDocumentFindManyArgs>(args?: SelectSubset<T, CompanyDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompanyDocument.
     * @param {CompanyDocumentCreateArgs} args - Arguments to create a CompanyDocument.
     * @example
     * // Create one CompanyDocument
     * const CompanyDocument = await prisma.companyDocument.create({
     *   data: {
     *     // ... data to create a CompanyDocument
     *   }
     * })
     * 
     */
    create<T extends CompanyDocumentCreateArgs>(args: SelectSubset<T, CompanyDocumentCreateArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompanyDocuments.
     * @param {CompanyDocumentCreateManyArgs} args - Arguments to create many CompanyDocuments.
     * @example
     * // Create many CompanyDocuments
     * const companyDocument = await prisma.companyDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyDocumentCreateManyArgs>(args?: SelectSubset<T, CompanyDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyDocuments and returns the data saved in the database.
     * @param {CompanyDocumentCreateManyAndReturnArgs} args - Arguments to create many CompanyDocuments.
     * @example
     * // Create many CompanyDocuments
     * const companyDocument = await prisma.companyDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyDocuments and only return the `id`
     * const companyDocumentWithIdOnly = await prisma.companyDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompanyDocument.
     * @param {CompanyDocumentDeleteArgs} args - Arguments to delete one CompanyDocument.
     * @example
     * // Delete one CompanyDocument
     * const CompanyDocument = await prisma.companyDocument.delete({
     *   where: {
     *     // ... filter to delete one CompanyDocument
     *   }
     * })
     * 
     */
    delete<T extends CompanyDocumentDeleteArgs>(args: SelectSubset<T, CompanyDocumentDeleteArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompanyDocument.
     * @param {CompanyDocumentUpdateArgs} args - Arguments to update one CompanyDocument.
     * @example
     * // Update one CompanyDocument
     * const companyDocument = await prisma.companyDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyDocumentUpdateArgs>(args: SelectSubset<T, CompanyDocumentUpdateArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompanyDocuments.
     * @param {CompanyDocumentDeleteManyArgs} args - Arguments to filter CompanyDocuments to delete.
     * @example
     * // Delete a few CompanyDocuments
     * const { count } = await prisma.companyDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDocumentDeleteManyArgs>(args?: SelectSubset<T, CompanyDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyDocuments
     * const companyDocument = await prisma.companyDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyDocumentUpdateManyArgs>(args: SelectSubset<T, CompanyDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyDocument.
     * @param {CompanyDocumentUpsertArgs} args - Arguments to update or create a CompanyDocument.
     * @example
     * // Update or create a CompanyDocument
     * const companyDocument = await prisma.companyDocument.upsert({
     *   create: {
     *     // ... data to create a CompanyDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyDocument we want to update
     *   }
     * })
     */
    upsert<T extends CompanyDocumentUpsertArgs>(args: SelectSubset<T, CompanyDocumentUpsertArgs<ExtArgs>>): Prisma__CompanyDocumentClient<$Result.GetResult<Prisma.$CompanyDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompanyDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentCountArgs} args - Arguments to filter CompanyDocuments to count.
     * @example
     * // Count the number of CompanyDocuments
     * const count = await prisma.companyDocument.count({
     *   where: {
     *     // ... the filter for the CompanyDocuments we want to count
     *   }
     * })
    **/
    count<T extends CompanyDocumentCountArgs>(
      args?: Subset<T, CompanyDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyDocumentAggregateArgs>(args: Subset<T, CompanyDocumentAggregateArgs>): Prisma.PrismaPromise<GetCompanyDocumentAggregateType<T>>

    /**
     * Group by CompanyDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyDocumentGroupByArgs['orderBy'] }
        : { orderBy?: CompanyDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyDocument model
   */
  readonly fields: CompanyDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyDocument model
   */ 
  interface CompanyDocumentFieldRefs {
    readonly id: FieldRef<"CompanyDocument", 'String'>
    readonly companyId: FieldRef<"CompanyDocument", 'String'>
    readonly docType: FieldRef<"CompanyDocument", 'CompanyDocType'>
    readonly docNumber: FieldRef<"CompanyDocument", 'String'>
    readonly issuer: FieldRef<"CompanyDocument", 'String'>
    readonly issueDate: FieldRef<"CompanyDocument", 'DateTime'>
    readonly expiresAt: FieldRef<"CompanyDocument", 'DateTime'>
    readonly filePath: FieldRef<"CompanyDocument", 'String'>
    readonly notes: FieldRef<"CompanyDocument", 'String'>
    readonly version: FieldRef<"CompanyDocument", 'Int'>
    readonly createdAt: FieldRef<"CompanyDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyDocument findUnique
   */
  export type CompanyDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CompanyDocument to fetch.
     */
    where: CompanyDocumentWhereUniqueInput
  }

  /**
   * CompanyDocument findUniqueOrThrow
   */
  export type CompanyDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CompanyDocument to fetch.
     */
    where: CompanyDocumentWhereUniqueInput
  }

  /**
   * CompanyDocument findFirst
   */
  export type CompanyDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CompanyDocument to fetch.
     */
    where?: CompanyDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyDocuments to fetch.
     */
    orderBy?: CompanyDocumentOrderByWithRelationInput | CompanyDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyDocuments.
     */
    cursor?: CompanyDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyDocuments.
     */
    distinct?: CompanyDocumentScalarFieldEnum | CompanyDocumentScalarFieldEnum[]
  }

  /**
   * CompanyDocument findFirstOrThrow
   */
  export type CompanyDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CompanyDocument to fetch.
     */
    where?: CompanyDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyDocuments to fetch.
     */
    orderBy?: CompanyDocumentOrderByWithRelationInput | CompanyDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyDocuments.
     */
    cursor?: CompanyDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyDocuments.
     */
    distinct?: CompanyDocumentScalarFieldEnum | CompanyDocumentScalarFieldEnum[]
  }

  /**
   * CompanyDocument findMany
   */
  export type CompanyDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CompanyDocuments to fetch.
     */
    where?: CompanyDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyDocuments to fetch.
     */
    orderBy?: CompanyDocumentOrderByWithRelationInput | CompanyDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyDocuments.
     */
    cursor?: CompanyDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyDocuments.
     */
    skip?: number
    distinct?: CompanyDocumentScalarFieldEnum | CompanyDocumentScalarFieldEnum[]
  }

  /**
   * CompanyDocument create
   */
  export type CompanyDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyDocument.
     */
    data: XOR<CompanyDocumentCreateInput, CompanyDocumentUncheckedCreateInput>
  }

  /**
   * CompanyDocument createMany
   */
  export type CompanyDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyDocuments.
     */
    data: CompanyDocumentCreateManyInput | CompanyDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyDocument createManyAndReturn
   */
  export type CompanyDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompanyDocuments.
     */
    data: CompanyDocumentCreateManyInput | CompanyDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyDocument update
   */
  export type CompanyDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyDocument.
     */
    data: XOR<CompanyDocumentUpdateInput, CompanyDocumentUncheckedUpdateInput>
    /**
     * Choose, which CompanyDocument to update.
     */
    where: CompanyDocumentWhereUniqueInput
  }

  /**
   * CompanyDocument updateMany
   */
  export type CompanyDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyDocuments.
     */
    data: XOR<CompanyDocumentUpdateManyMutationInput, CompanyDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CompanyDocuments to update
     */
    where?: CompanyDocumentWhereInput
  }

  /**
   * CompanyDocument upsert
   */
  export type CompanyDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyDocument to update in case it exists.
     */
    where: CompanyDocumentWhereUniqueInput
    /**
     * In case the CompanyDocument found by the `where` argument doesn't exist, create a new CompanyDocument with this data.
     */
    create: XOR<CompanyDocumentCreateInput, CompanyDocumentUncheckedCreateInput>
    /**
     * In case the CompanyDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyDocumentUpdateInput, CompanyDocumentUncheckedUpdateInput>
  }

  /**
   * CompanyDocument delete
   */
  export type CompanyDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
    /**
     * Filter which CompanyDocument to delete.
     */
    where: CompanyDocumentWhereUniqueInput
  }

  /**
   * CompanyDocument deleteMany
   */
  export type CompanyDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyDocuments to delete
     */
    where?: CompanyDocumentWhereInput
  }

  /**
   * CompanyDocument without action
   */
  export type CompanyDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyDocument
     */
    select?: CompanyDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyDocumentInclude<ExtArgs> | null
  }


  /**
   * Model Licitacao
   */

  export type AggregateLicitacao = {
    _count: LicitacaoCountAggregateOutputType | null
    _avg: LicitacaoAvgAggregateOutputType | null
    _sum: LicitacaoSumAggregateOutputType | null
    _min: LicitacaoMinAggregateOutputType | null
    _max: LicitacaoMaxAggregateOutputType | null
  }

  export type LicitacaoAvgAggregateOutputType = {
    saleValue: Decimal | null
  }

  export type LicitacaoSumAggregateOutputType = {
    saleValue: Decimal | null
  }

  export type LicitacaoMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    title: string | null
    orgao: string | null
    modalidade: string | null
    editalUrl: string | null
    sessionAt: Date | null
    submissionDeadline: Date | null
    status: $Enums.LicitacaoStatus | null
    saleValue: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LicitacaoMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    title: string | null
    orgao: string | null
    modalidade: string | null
    editalUrl: string | null
    sessionAt: Date | null
    submissionDeadline: Date | null
    status: $Enums.LicitacaoStatus | null
    saleValue: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LicitacaoCountAggregateOutputType = {
    id: number
    companyId: number
    title: number
    orgao: number
    modalidade: number
    editalUrl: number
    sessionAt: number
    submissionDeadline: number
    status: number
    saleValue: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LicitacaoAvgAggregateInputType = {
    saleValue?: true
  }

  export type LicitacaoSumAggregateInputType = {
    saleValue?: true
  }

  export type LicitacaoMinAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    orgao?: true
    modalidade?: true
    editalUrl?: true
    sessionAt?: true
    submissionDeadline?: true
    status?: true
    saleValue?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LicitacaoMaxAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    orgao?: true
    modalidade?: true
    editalUrl?: true
    sessionAt?: true
    submissionDeadline?: true
    status?: true
    saleValue?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LicitacaoCountAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    orgao?: true
    modalidade?: true
    editalUrl?: true
    sessionAt?: true
    submissionDeadline?: true
    status?: true
    saleValue?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LicitacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Licitacao to aggregate.
     */
    where?: LicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licitacaos to fetch.
     */
    orderBy?: LicitacaoOrderByWithRelationInput | LicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Licitacaos
    **/
    _count?: true | LicitacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicitacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicitacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicitacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicitacaoMaxAggregateInputType
  }

  export type GetLicitacaoAggregateType<T extends LicitacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateLicitacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicitacao[P]>
      : GetScalarType<T[P], AggregateLicitacao[P]>
  }




  export type LicitacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoWhereInput
    orderBy?: LicitacaoOrderByWithAggregationInput | LicitacaoOrderByWithAggregationInput[]
    by: LicitacaoScalarFieldEnum[] | LicitacaoScalarFieldEnum
    having?: LicitacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicitacaoCountAggregateInputType | true
    _avg?: LicitacaoAvgAggregateInputType
    _sum?: LicitacaoSumAggregateInputType
    _min?: LicitacaoMinAggregateInputType
    _max?: LicitacaoMaxAggregateInputType
  }

  export type LicitacaoGroupByOutputType = {
    id: string
    companyId: string
    title: string
    orgao: string | null
    modalidade: string | null
    editalUrl: string | null
    sessionAt: Date | null
    submissionDeadline: Date | null
    status: $Enums.LicitacaoStatus
    saleValue: Decimal | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: LicitacaoCountAggregateOutputType | null
    _avg: LicitacaoAvgAggregateOutputType | null
    _sum: LicitacaoSumAggregateOutputType | null
    _min: LicitacaoMinAggregateOutputType | null
    _max: LicitacaoMaxAggregateOutputType | null
  }

  type GetLicitacaoGroupByPayload<T extends LicitacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicitacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicitacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicitacaoGroupByOutputType[P]>
            : GetScalarType<T[P], LicitacaoGroupByOutputType[P]>
        }
      >
    >


  export type LicitacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    orgao?: boolean
    modalidade?: boolean
    editalUrl?: boolean
    sessionAt?: boolean
    submissionDeadline?: boolean
    status?: boolean
    saleValue?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    documents?: boolean | Licitacao$documentsArgs<ExtArgs>
    events?: boolean | Licitacao$eventsArgs<ExtArgs>
    _count?: boolean | LicitacaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licitacao"]>

  export type LicitacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    orgao?: boolean
    modalidade?: boolean
    editalUrl?: boolean
    sessionAt?: boolean
    submissionDeadline?: boolean
    status?: boolean
    saleValue?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licitacao"]>

  export type LicitacaoSelectScalar = {
    id?: boolean
    companyId?: boolean
    title?: boolean
    orgao?: boolean
    modalidade?: boolean
    editalUrl?: boolean
    sessionAt?: boolean
    submissionDeadline?: boolean
    status?: boolean
    saleValue?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LicitacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    documents?: boolean | Licitacao$documentsArgs<ExtArgs>
    events?: boolean | Licitacao$eventsArgs<ExtArgs>
    _count?: boolean | LicitacaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LicitacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $LicitacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Licitacao"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      documents: Prisma.$LicitacaoDocumentPayload<ExtArgs>[]
      events: Prisma.$LicitacaoEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      title: string
      orgao: string | null
      modalidade: string | null
      editalUrl: string | null
      sessionAt: Date | null
      submissionDeadline: Date | null
      status: $Enums.LicitacaoStatus
      saleValue: Prisma.Decimal | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["licitacao"]>
    composites: {}
  }

  type LicitacaoGetPayload<S extends boolean | null | undefined | LicitacaoDefaultArgs> = $Result.GetResult<Prisma.$LicitacaoPayload, S>

  type LicitacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LicitacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LicitacaoCountAggregateInputType | true
    }

  export interface LicitacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Licitacao'], meta: { name: 'Licitacao' } }
    /**
     * Find zero or one Licitacao that matches the filter.
     * @param {LicitacaoFindUniqueArgs} args - Arguments to find a Licitacao
     * @example
     * // Get one Licitacao
     * const licitacao = await prisma.licitacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicitacaoFindUniqueArgs>(args: SelectSubset<T, LicitacaoFindUniqueArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Licitacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LicitacaoFindUniqueOrThrowArgs} args - Arguments to find a Licitacao
     * @example
     * // Get one Licitacao
     * const licitacao = await prisma.licitacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicitacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, LicitacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Licitacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoFindFirstArgs} args - Arguments to find a Licitacao
     * @example
     * // Get one Licitacao
     * const licitacao = await prisma.licitacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicitacaoFindFirstArgs>(args?: SelectSubset<T, LicitacaoFindFirstArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Licitacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoFindFirstOrThrowArgs} args - Arguments to find a Licitacao
     * @example
     * // Get one Licitacao
     * const licitacao = await prisma.licitacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicitacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, LicitacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Licitacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Licitacaos
     * const licitacaos = await prisma.licitacao.findMany()
     * 
     * // Get first 10 Licitacaos
     * const licitacaos = await prisma.licitacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licitacaoWithIdOnly = await prisma.licitacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicitacaoFindManyArgs>(args?: SelectSubset<T, LicitacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Licitacao.
     * @param {LicitacaoCreateArgs} args - Arguments to create a Licitacao.
     * @example
     * // Create one Licitacao
     * const Licitacao = await prisma.licitacao.create({
     *   data: {
     *     // ... data to create a Licitacao
     *   }
     * })
     * 
     */
    create<T extends LicitacaoCreateArgs>(args: SelectSubset<T, LicitacaoCreateArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Licitacaos.
     * @param {LicitacaoCreateManyArgs} args - Arguments to create many Licitacaos.
     * @example
     * // Create many Licitacaos
     * const licitacao = await prisma.licitacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicitacaoCreateManyArgs>(args?: SelectSubset<T, LicitacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Licitacaos and returns the data saved in the database.
     * @param {LicitacaoCreateManyAndReturnArgs} args - Arguments to create many Licitacaos.
     * @example
     * // Create many Licitacaos
     * const licitacao = await prisma.licitacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Licitacaos and only return the `id`
     * const licitacaoWithIdOnly = await prisma.licitacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LicitacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, LicitacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Licitacao.
     * @param {LicitacaoDeleteArgs} args - Arguments to delete one Licitacao.
     * @example
     * // Delete one Licitacao
     * const Licitacao = await prisma.licitacao.delete({
     *   where: {
     *     // ... filter to delete one Licitacao
     *   }
     * })
     * 
     */
    delete<T extends LicitacaoDeleteArgs>(args: SelectSubset<T, LicitacaoDeleteArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Licitacao.
     * @param {LicitacaoUpdateArgs} args - Arguments to update one Licitacao.
     * @example
     * // Update one Licitacao
     * const licitacao = await prisma.licitacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicitacaoUpdateArgs>(args: SelectSubset<T, LicitacaoUpdateArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Licitacaos.
     * @param {LicitacaoDeleteManyArgs} args - Arguments to filter Licitacaos to delete.
     * @example
     * // Delete a few Licitacaos
     * const { count } = await prisma.licitacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicitacaoDeleteManyArgs>(args?: SelectSubset<T, LicitacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Licitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Licitacaos
     * const licitacao = await prisma.licitacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicitacaoUpdateManyArgs>(args: SelectSubset<T, LicitacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Licitacao.
     * @param {LicitacaoUpsertArgs} args - Arguments to update or create a Licitacao.
     * @example
     * // Update or create a Licitacao
     * const licitacao = await prisma.licitacao.upsert({
     *   create: {
     *     // ... data to create a Licitacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Licitacao we want to update
     *   }
     * })
     */
    upsert<T extends LicitacaoUpsertArgs>(args: SelectSubset<T, LicitacaoUpsertArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Licitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoCountArgs} args - Arguments to filter Licitacaos to count.
     * @example
     * // Count the number of Licitacaos
     * const count = await prisma.licitacao.count({
     *   where: {
     *     // ... the filter for the Licitacaos we want to count
     *   }
     * })
    **/
    count<T extends LicitacaoCountArgs>(
      args?: Subset<T, LicitacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicitacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Licitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicitacaoAggregateArgs>(args: Subset<T, LicitacaoAggregateArgs>): Prisma.PrismaPromise<GetLicitacaoAggregateType<T>>

    /**
     * Group by Licitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicitacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicitacaoGroupByArgs['orderBy'] }
        : { orderBy?: LicitacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicitacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicitacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Licitacao model
   */
  readonly fields: LicitacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Licitacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicitacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documents<T extends Licitacao$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Licitacao$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Licitacao$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Licitacao$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Licitacao model
   */ 
  interface LicitacaoFieldRefs {
    readonly id: FieldRef<"Licitacao", 'String'>
    readonly companyId: FieldRef<"Licitacao", 'String'>
    readonly title: FieldRef<"Licitacao", 'String'>
    readonly orgao: FieldRef<"Licitacao", 'String'>
    readonly modalidade: FieldRef<"Licitacao", 'String'>
    readonly editalUrl: FieldRef<"Licitacao", 'String'>
    readonly sessionAt: FieldRef<"Licitacao", 'DateTime'>
    readonly submissionDeadline: FieldRef<"Licitacao", 'DateTime'>
    readonly status: FieldRef<"Licitacao", 'LicitacaoStatus'>
    readonly saleValue: FieldRef<"Licitacao", 'Decimal'>
    readonly notes: FieldRef<"Licitacao", 'String'>
    readonly createdAt: FieldRef<"Licitacao", 'DateTime'>
    readonly updatedAt: FieldRef<"Licitacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Licitacao findUnique
   */
  export type LicitacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Licitacao to fetch.
     */
    where: LicitacaoWhereUniqueInput
  }

  /**
   * Licitacao findUniqueOrThrow
   */
  export type LicitacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Licitacao to fetch.
     */
    where: LicitacaoWhereUniqueInput
  }

  /**
   * Licitacao findFirst
   */
  export type LicitacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Licitacao to fetch.
     */
    where?: LicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licitacaos to fetch.
     */
    orderBy?: LicitacaoOrderByWithRelationInput | LicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licitacaos.
     */
    cursor?: LicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licitacaos.
     */
    distinct?: LicitacaoScalarFieldEnum | LicitacaoScalarFieldEnum[]
  }

  /**
   * Licitacao findFirstOrThrow
   */
  export type LicitacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Licitacao to fetch.
     */
    where?: LicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licitacaos to fetch.
     */
    orderBy?: LicitacaoOrderByWithRelationInput | LicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licitacaos.
     */
    cursor?: LicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licitacaos.
     */
    distinct?: LicitacaoScalarFieldEnum | LicitacaoScalarFieldEnum[]
  }

  /**
   * Licitacao findMany
   */
  export type LicitacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Licitacaos to fetch.
     */
    where?: LicitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licitacaos to fetch.
     */
    orderBy?: LicitacaoOrderByWithRelationInput | LicitacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Licitacaos.
     */
    cursor?: LicitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licitacaos.
     */
    skip?: number
    distinct?: LicitacaoScalarFieldEnum | LicitacaoScalarFieldEnum[]
  }

  /**
   * Licitacao create
   */
  export type LicitacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Licitacao.
     */
    data: XOR<LicitacaoCreateInput, LicitacaoUncheckedCreateInput>
  }

  /**
   * Licitacao createMany
   */
  export type LicitacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Licitacaos.
     */
    data: LicitacaoCreateManyInput | LicitacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Licitacao createManyAndReturn
   */
  export type LicitacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Licitacaos.
     */
    data: LicitacaoCreateManyInput | LicitacaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Licitacao update
   */
  export type LicitacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Licitacao.
     */
    data: XOR<LicitacaoUpdateInput, LicitacaoUncheckedUpdateInput>
    /**
     * Choose, which Licitacao to update.
     */
    where: LicitacaoWhereUniqueInput
  }

  /**
   * Licitacao updateMany
   */
  export type LicitacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Licitacaos.
     */
    data: XOR<LicitacaoUpdateManyMutationInput, LicitacaoUncheckedUpdateManyInput>
    /**
     * Filter which Licitacaos to update
     */
    where?: LicitacaoWhereInput
  }

  /**
   * Licitacao upsert
   */
  export type LicitacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Licitacao to update in case it exists.
     */
    where: LicitacaoWhereUniqueInput
    /**
     * In case the Licitacao found by the `where` argument doesn't exist, create a new Licitacao with this data.
     */
    create: XOR<LicitacaoCreateInput, LicitacaoUncheckedCreateInput>
    /**
     * In case the Licitacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicitacaoUpdateInput, LicitacaoUncheckedUpdateInput>
  }

  /**
   * Licitacao delete
   */
  export type LicitacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
    /**
     * Filter which Licitacao to delete.
     */
    where: LicitacaoWhereUniqueInput
  }

  /**
   * Licitacao deleteMany
   */
  export type LicitacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Licitacaos to delete
     */
    where?: LicitacaoWhereInput
  }

  /**
   * Licitacao.documents
   */
  export type Licitacao$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    where?: LicitacaoDocumentWhereInput
    orderBy?: LicitacaoDocumentOrderByWithRelationInput | LicitacaoDocumentOrderByWithRelationInput[]
    cursor?: LicitacaoDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicitacaoDocumentScalarFieldEnum | LicitacaoDocumentScalarFieldEnum[]
  }

  /**
   * Licitacao.events
   */
  export type Licitacao$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    where?: LicitacaoEventWhereInput
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    cursor?: LicitacaoEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicitacaoEventScalarFieldEnum | LicitacaoEventScalarFieldEnum[]
  }

  /**
   * Licitacao without action
   */
  export type LicitacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Licitacao
     */
    select?: LicitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoInclude<ExtArgs> | null
  }


  /**
   * Model LicitacaoDocument
   */

  export type AggregateLicitacaoDocument = {
    _count: LicitacaoDocumentCountAggregateOutputType | null
    _avg: LicitacaoDocumentAvgAggregateOutputType | null
    _sum: LicitacaoDocumentSumAggregateOutputType | null
    _min: LicitacaoDocumentMinAggregateOutputType | null
    _max: LicitacaoDocumentMaxAggregateOutputType | null
  }

  export type LicitacaoDocumentAvgAggregateOutputType = {
    version: number | null
  }

  export type LicitacaoDocumentSumAggregateOutputType = {
    version: number | null
  }

  export type LicitacaoDocumentMinAggregateOutputType = {
    id: string | null
    licitacaoId: string | null
    docType: $Enums.LicitacaoDocType | null
    required: boolean | null
    submitted: boolean | null
    signed: boolean | null
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    generatedFromTemplate: boolean | null
    templatePath: string | null
    version: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LicitacaoDocumentMaxAggregateOutputType = {
    id: string | null
    licitacaoId: string | null
    docType: $Enums.LicitacaoDocType | null
    required: boolean | null
    submitted: boolean | null
    signed: boolean | null
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    generatedFromTemplate: boolean | null
    templatePath: string | null
    version: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LicitacaoDocumentCountAggregateOutputType = {
    id: number
    licitacaoId: number
    docType: number
    required: number
    submitted: number
    signed: number
    issueDate: number
    expiresAt: number
    filePath: number
    generatedFromTemplate: number
    templatePath: number
    version: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LicitacaoDocumentAvgAggregateInputType = {
    version?: true
  }

  export type LicitacaoDocumentSumAggregateInputType = {
    version?: true
  }

  export type LicitacaoDocumentMinAggregateInputType = {
    id?: true
    licitacaoId?: true
    docType?: true
    required?: true
    submitted?: true
    signed?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    generatedFromTemplate?: true
    templatePath?: true
    version?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LicitacaoDocumentMaxAggregateInputType = {
    id?: true
    licitacaoId?: true
    docType?: true
    required?: true
    submitted?: true
    signed?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    generatedFromTemplate?: true
    templatePath?: true
    version?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LicitacaoDocumentCountAggregateInputType = {
    id?: true
    licitacaoId?: true
    docType?: true
    required?: true
    submitted?: true
    signed?: true
    issueDate?: true
    expiresAt?: true
    filePath?: true
    generatedFromTemplate?: true
    templatePath?: true
    version?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LicitacaoDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicitacaoDocument to aggregate.
     */
    where?: LicitacaoDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoDocuments to fetch.
     */
    orderBy?: LicitacaoDocumentOrderByWithRelationInput | LicitacaoDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicitacaoDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LicitacaoDocuments
    **/
    _count?: true | LicitacaoDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicitacaoDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicitacaoDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicitacaoDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicitacaoDocumentMaxAggregateInputType
  }

  export type GetLicitacaoDocumentAggregateType<T extends LicitacaoDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateLicitacaoDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicitacaoDocument[P]>
      : GetScalarType<T[P], AggregateLicitacaoDocument[P]>
  }




  export type LicitacaoDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoDocumentWhereInput
    orderBy?: LicitacaoDocumentOrderByWithAggregationInput | LicitacaoDocumentOrderByWithAggregationInput[]
    by: LicitacaoDocumentScalarFieldEnum[] | LicitacaoDocumentScalarFieldEnum
    having?: LicitacaoDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicitacaoDocumentCountAggregateInputType | true
    _avg?: LicitacaoDocumentAvgAggregateInputType
    _sum?: LicitacaoDocumentSumAggregateInputType
    _min?: LicitacaoDocumentMinAggregateInputType
    _max?: LicitacaoDocumentMaxAggregateInputType
  }

  export type LicitacaoDocumentGroupByOutputType = {
    id: string
    licitacaoId: string
    docType: $Enums.LicitacaoDocType
    required: boolean
    submitted: boolean
    signed: boolean
    issueDate: Date | null
    expiresAt: Date | null
    filePath: string | null
    generatedFromTemplate: boolean
    templatePath: string | null
    version: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: LicitacaoDocumentCountAggregateOutputType | null
    _avg: LicitacaoDocumentAvgAggregateOutputType | null
    _sum: LicitacaoDocumentSumAggregateOutputType | null
    _min: LicitacaoDocumentMinAggregateOutputType | null
    _max: LicitacaoDocumentMaxAggregateOutputType | null
  }

  type GetLicitacaoDocumentGroupByPayload<T extends LicitacaoDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicitacaoDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicitacaoDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicitacaoDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], LicitacaoDocumentGroupByOutputType[P]>
        }
      >
    >


  export type LicitacaoDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licitacaoId?: boolean
    docType?: boolean
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    generatedFromTemplate?: boolean
    templatePath?: boolean
    version?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licitacaoDocument"]>

  export type LicitacaoDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licitacaoId?: boolean
    docType?: boolean
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    generatedFromTemplate?: boolean
    templatePath?: boolean
    version?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licitacaoDocument"]>

  export type LicitacaoDocumentSelectScalar = {
    id?: boolean
    licitacaoId?: boolean
    docType?: boolean
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: boolean
    expiresAt?: boolean
    filePath?: boolean
    generatedFromTemplate?: boolean
    templatePath?: boolean
    version?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LicitacaoDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
  }
  export type LicitacaoDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
  }

  export type $LicitacaoDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LicitacaoDocument"
    objects: {
      licitacao: Prisma.$LicitacaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      licitacaoId: string
      docType: $Enums.LicitacaoDocType
      required: boolean
      submitted: boolean
      signed: boolean
      issueDate: Date | null
      expiresAt: Date | null
      filePath: string | null
      generatedFromTemplate: boolean
      templatePath: string | null
      version: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["licitacaoDocument"]>
    composites: {}
  }

  type LicitacaoDocumentGetPayload<S extends boolean | null | undefined | LicitacaoDocumentDefaultArgs> = $Result.GetResult<Prisma.$LicitacaoDocumentPayload, S>

  type LicitacaoDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LicitacaoDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LicitacaoDocumentCountAggregateInputType | true
    }

  export interface LicitacaoDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LicitacaoDocument'], meta: { name: 'LicitacaoDocument' } }
    /**
     * Find zero or one LicitacaoDocument that matches the filter.
     * @param {LicitacaoDocumentFindUniqueArgs} args - Arguments to find a LicitacaoDocument
     * @example
     * // Get one LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicitacaoDocumentFindUniqueArgs>(args: SelectSubset<T, LicitacaoDocumentFindUniqueArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LicitacaoDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LicitacaoDocumentFindUniqueOrThrowArgs} args - Arguments to find a LicitacaoDocument
     * @example
     * // Get one LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicitacaoDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, LicitacaoDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LicitacaoDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentFindFirstArgs} args - Arguments to find a LicitacaoDocument
     * @example
     * // Get one LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicitacaoDocumentFindFirstArgs>(args?: SelectSubset<T, LicitacaoDocumentFindFirstArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LicitacaoDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentFindFirstOrThrowArgs} args - Arguments to find a LicitacaoDocument
     * @example
     * // Get one LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicitacaoDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, LicitacaoDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LicitacaoDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LicitacaoDocuments
     * const licitacaoDocuments = await prisma.licitacaoDocument.findMany()
     * 
     * // Get first 10 LicitacaoDocuments
     * const licitacaoDocuments = await prisma.licitacaoDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licitacaoDocumentWithIdOnly = await prisma.licitacaoDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicitacaoDocumentFindManyArgs>(args?: SelectSubset<T, LicitacaoDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LicitacaoDocument.
     * @param {LicitacaoDocumentCreateArgs} args - Arguments to create a LicitacaoDocument.
     * @example
     * // Create one LicitacaoDocument
     * const LicitacaoDocument = await prisma.licitacaoDocument.create({
     *   data: {
     *     // ... data to create a LicitacaoDocument
     *   }
     * })
     * 
     */
    create<T extends LicitacaoDocumentCreateArgs>(args: SelectSubset<T, LicitacaoDocumentCreateArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LicitacaoDocuments.
     * @param {LicitacaoDocumentCreateManyArgs} args - Arguments to create many LicitacaoDocuments.
     * @example
     * // Create many LicitacaoDocuments
     * const licitacaoDocument = await prisma.licitacaoDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicitacaoDocumentCreateManyArgs>(args?: SelectSubset<T, LicitacaoDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LicitacaoDocuments and returns the data saved in the database.
     * @param {LicitacaoDocumentCreateManyAndReturnArgs} args - Arguments to create many LicitacaoDocuments.
     * @example
     * // Create many LicitacaoDocuments
     * const licitacaoDocument = await prisma.licitacaoDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LicitacaoDocuments and only return the `id`
     * const licitacaoDocumentWithIdOnly = await prisma.licitacaoDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LicitacaoDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, LicitacaoDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LicitacaoDocument.
     * @param {LicitacaoDocumentDeleteArgs} args - Arguments to delete one LicitacaoDocument.
     * @example
     * // Delete one LicitacaoDocument
     * const LicitacaoDocument = await prisma.licitacaoDocument.delete({
     *   where: {
     *     // ... filter to delete one LicitacaoDocument
     *   }
     * })
     * 
     */
    delete<T extends LicitacaoDocumentDeleteArgs>(args: SelectSubset<T, LicitacaoDocumentDeleteArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LicitacaoDocument.
     * @param {LicitacaoDocumentUpdateArgs} args - Arguments to update one LicitacaoDocument.
     * @example
     * // Update one LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicitacaoDocumentUpdateArgs>(args: SelectSubset<T, LicitacaoDocumentUpdateArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LicitacaoDocuments.
     * @param {LicitacaoDocumentDeleteManyArgs} args - Arguments to filter LicitacaoDocuments to delete.
     * @example
     * // Delete a few LicitacaoDocuments
     * const { count } = await prisma.licitacaoDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicitacaoDocumentDeleteManyArgs>(args?: SelectSubset<T, LicitacaoDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LicitacaoDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LicitacaoDocuments
     * const licitacaoDocument = await prisma.licitacaoDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicitacaoDocumentUpdateManyArgs>(args: SelectSubset<T, LicitacaoDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LicitacaoDocument.
     * @param {LicitacaoDocumentUpsertArgs} args - Arguments to update or create a LicitacaoDocument.
     * @example
     * // Update or create a LicitacaoDocument
     * const licitacaoDocument = await prisma.licitacaoDocument.upsert({
     *   create: {
     *     // ... data to create a LicitacaoDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LicitacaoDocument we want to update
     *   }
     * })
     */
    upsert<T extends LicitacaoDocumentUpsertArgs>(args: SelectSubset<T, LicitacaoDocumentUpsertArgs<ExtArgs>>): Prisma__LicitacaoDocumentClient<$Result.GetResult<Prisma.$LicitacaoDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LicitacaoDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentCountArgs} args - Arguments to filter LicitacaoDocuments to count.
     * @example
     * // Count the number of LicitacaoDocuments
     * const count = await prisma.licitacaoDocument.count({
     *   where: {
     *     // ... the filter for the LicitacaoDocuments we want to count
     *   }
     * })
    **/
    count<T extends LicitacaoDocumentCountArgs>(
      args?: Subset<T, LicitacaoDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicitacaoDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LicitacaoDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicitacaoDocumentAggregateArgs>(args: Subset<T, LicitacaoDocumentAggregateArgs>): Prisma.PrismaPromise<GetLicitacaoDocumentAggregateType<T>>

    /**
     * Group by LicitacaoDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicitacaoDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicitacaoDocumentGroupByArgs['orderBy'] }
        : { orderBy?: LicitacaoDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicitacaoDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicitacaoDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LicitacaoDocument model
   */
  readonly fields: LicitacaoDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LicitacaoDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicitacaoDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    licitacao<T extends LicitacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LicitacaoDefaultArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LicitacaoDocument model
   */ 
  interface LicitacaoDocumentFieldRefs {
    readonly id: FieldRef<"LicitacaoDocument", 'String'>
    readonly licitacaoId: FieldRef<"LicitacaoDocument", 'String'>
    readonly docType: FieldRef<"LicitacaoDocument", 'LicitacaoDocType'>
    readonly required: FieldRef<"LicitacaoDocument", 'Boolean'>
    readonly submitted: FieldRef<"LicitacaoDocument", 'Boolean'>
    readonly signed: FieldRef<"LicitacaoDocument", 'Boolean'>
    readonly issueDate: FieldRef<"LicitacaoDocument", 'DateTime'>
    readonly expiresAt: FieldRef<"LicitacaoDocument", 'DateTime'>
    readonly filePath: FieldRef<"LicitacaoDocument", 'String'>
    readonly generatedFromTemplate: FieldRef<"LicitacaoDocument", 'Boolean'>
    readonly templatePath: FieldRef<"LicitacaoDocument", 'String'>
    readonly version: FieldRef<"LicitacaoDocument", 'Int'>
    readonly notes: FieldRef<"LicitacaoDocument", 'String'>
    readonly createdAt: FieldRef<"LicitacaoDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"LicitacaoDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LicitacaoDocument findUnique
   */
  export type LicitacaoDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoDocument to fetch.
     */
    where: LicitacaoDocumentWhereUniqueInput
  }

  /**
   * LicitacaoDocument findUniqueOrThrow
   */
  export type LicitacaoDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoDocument to fetch.
     */
    where: LicitacaoDocumentWhereUniqueInput
  }

  /**
   * LicitacaoDocument findFirst
   */
  export type LicitacaoDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoDocument to fetch.
     */
    where?: LicitacaoDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoDocuments to fetch.
     */
    orderBy?: LicitacaoDocumentOrderByWithRelationInput | LicitacaoDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicitacaoDocuments.
     */
    cursor?: LicitacaoDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicitacaoDocuments.
     */
    distinct?: LicitacaoDocumentScalarFieldEnum | LicitacaoDocumentScalarFieldEnum[]
  }

  /**
   * LicitacaoDocument findFirstOrThrow
   */
  export type LicitacaoDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoDocument to fetch.
     */
    where?: LicitacaoDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoDocuments to fetch.
     */
    orderBy?: LicitacaoDocumentOrderByWithRelationInput | LicitacaoDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicitacaoDocuments.
     */
    cursor?: LicitacaoDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicitacaoDocuments.
     */
    distinct?: LicitacaoDocumentScalarFieldEnum | LicitacaoDocumentScalarFieldEnum[]
  }

  /**
   * LicitacaoDocument findMany
   */
  export type LicitacaoDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoDocuments to fetch.
     */
    where?: LicitacaoDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoDocuments to fetch.
     */
    orderBy?: LicitacaoDocumentOrderByWithRelationInput | LicitacaoDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LicitacaoDocuments.
     */
    cursor?: LicitacaoDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoDocuments.
     */
    skip?: number
    distinct?: LicitacaoDocumentScalarFieldEnum | LicitacaoDocumentScalarFieldEnum[]
  }

  /**
   * LicitacaoDocument create
   */
  export type LicitacaoDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a LicitacaoDocument.
     */
    data: XOR<LicitacaoDocumentCreateInput, LicitacaoDocumentUncheckedCreateInput>
  }

  /**
   * LicitacaoDocument createMany
   */
  export type LicitacaoDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LicitacaoDocuments.
     */
    data: LicitacaoDocumentCreateManyInput | LicitacaoDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LicitacaoDocument createManyAndReturn
   */
  export type LicitacaoDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LicitacaoDocuments.
     */
    data: LicitacaoDocumentCreateManyInput | LicitacaoDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LicitacaoDocument update
   */
  export type LicitacaoDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a LicitacaoDocument.
     */
    data: XOR<LicitacaoDocumentUpdateInput, LicitacaoDocumentUncheckedUpdateInput>
    /**
     * Choose, which LicitacaoDocument to update.
     */
    where: LicitacaoDocumentWhereUniqueInput
  }

  /**
   * LicitacaoDocument updateMany
   */
  export type LicitacaoDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LicitacaoDocuments.
     */
    data: XOR<LicitacaoDocumentUpdateManyMutationInput, LicitacaoDocumentUncheckedUpdateManyInput>
    /**
     * Filter which LicitacaoDocuments to update
     */
    where?: LicitacaoDocumentWhereInput
  }

  /**
   * LicitacaoDocument upsert
   */
  export type LicitacaoDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the LicitacaoDocument to update in case it exists.
     */
    where: LicitacaoDocumentWhereUniqueInput
    /**
     * In case the LicitacaoDocument found by the `where` argument doesn't exist, create a new LicitacaoDocument with this data.
     */
    create: XOR<LicitacaoDocumentCreateInput, LicitacaoDocumentUncheckedCreateInput>
    /**
     * In case the LicitacaoDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicitacaoDocumentUpdateInput, LicitacaoDocumentUncheckedUpdateInput>
  }

  /**
   * LicitacaoDocument delete
   */
  export type LicitacaoDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
    /**
     * Filter which LicitacaoDocument to delete.
     */
    where: LicitacaoDocumentWhereUniqueInput
  }

  /**
   * LicitacaoDocument deleteMany
   */
  export type LicitacaoDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicitacaoDocuments to delete
     */
    where?: LicitacaoDocumentWhereInput
  }

  /**
   * LicitacaoDocument without action
   */
  export type LicitacaoDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoDocument
     */
    select?: LicitacaoDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoDocumentInclude<ExtArgs> | null
  }


  /**
   * Model LicitacaoEvent
   */

  export type AggregateLicitacaoEvent = {
    _count: LicitacaoEventCountAggregateOutputType | null
    _min: LicitacaoEventMinAggregateOutputType | null
    _max: LicitacaoEventMaxAggregateOutputType | null
  }

  export type LicitacaoEventMinAggregateOutputType = {
    id: string | null
    licitacaoId: string | null
    eventAt: Date | null
    oldStatus: $Enums.LicitacaoStatus | null
    newStatus: $Enums.LicitacaoStatus | null
    description: string | null
    createdById: string | null
  }

  export type LicitacaoEventMaxAggregateOutputType = {
    id: string | null
    licitacaoId: string | null
    eventAt: Date | null
    oldStatus: $Enums.LicitacaoStatus | null
    newStatus: $Enums.LicitacaoStatus | null
    description: string | null
    createdById: string | null
  }

  export type LicitacaoEventCountAggregateOutputType = {
    id: number
    licitacaoId: number
    eventAt: number
    oldStatus: number
    newStatus: number
    description: number
    createdById: number
    _all: number
  }


  export type LicitacaoEventMinAggregateInputType = {
    id?: true
    licitacaoId?: true
    eventAt?: true
    oldStatus?: true
    newStatus?: true
    description?: true
    createdById?: true
  }

  export type LicitacaoEventMaxAggregateInputType = {
    id?: true
    licitacaoId?: true
    eventAt?: true
    oldStatus?: true
    newStatus?: true
    description?: true
    createdById?: true
  }

  export type LicitacaoEventCountAggregateInputType = {
    id?: true
    licitacaoId?: true
    eventAt?: true
    oldStatus?: true
    newStatus?: true
    description?: true
    createdById?: true
    _all?: true
  }

  export type LicitacaoEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicitacaoEvent to aggregate.
     */
    where?: LicitacaoEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoEvents to fetch.
     */
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicitacaoEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LicitacaoEvents
    **/
    _count?: true | LicitacaoEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicitacaoEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicitacaoEventMaxAggregateInputType
  }

  export type GetLicitacaoEventAggregateType<T extends LicitacaoEventAggregateArgs> = {
        [P in keyof T & keyof AggregateLicitacaoEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicitacaoEvent[P]>
      : GetScalarType<T[P], AggregateLicitacaoEvent[P]>
  }




  export type LicitacaoEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicitacaoEventWhereInput
    orderBy?: LicitacaoEventOrderByWithAggregationInput | LicitacaoEventOrderByWithAggregationInput[]
    by: LicitacaoEventScalarFieldEnum[] | LicitacaoEventScalarFieldEnum
    having?: LicitacaoEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicitacaoEventCountAggregateInputType | true
    _min?: LicitacaoEventMinAggregateInputType
    _max?: LicitacaoEventMaxAggregateInputType
  }

  export type LicitacaoEventGroupByOutputType = {
    id: string
    licitacaoId: string
    eventAt: Date
    oldStatus: $Enums.LicitacaoStatus | null
    newStatus: $Enums.LicitacaoStatus | null
    description: string | null
    createdById: string | null
    _count: LicitacaoEventCountAggregateOutputType | null
    _min: LicitacaoEventMinAggregateOutputType | null
    _max: LicitacaoEventMaxAggregateOutputType | null
  }

  type GetLicitacaoEventGroupByPayload<T extends LicitacaoEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicitacaoEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicitacaoEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicitacaoEventGroupByOutputType[P]>
            : GetScalarType<T[P], LicitacaoEventGroupByOutputType[P]>
        }
      >
    >


  export type LicitacaoEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licitacaoId?: boolean
    eventAt?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    description?: boolean
    createdById?: boolean
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
    createdBy?: boolean | LicitacaoEvent$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["licitacaoEvent"]>

  export type LicitacaoEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    licitacaoId?: boolean
    eventAt?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    description?: boolean
    createdById?: boolean
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
    createdBy?: boolean | LicitacaoEvent$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["licitacaoEvent"]>

  export type LicitacaoEventSelectScalar = {
    id?: boolean
    licitacaoId?: boolean
    eventAt?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    description?: boolean
    createdById?: boolean
  }

  export type LicitacaoEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
    createdBy?: boolean | LicitacaoEvent$createdByArgs<ExtArgs>
  }
  export type LicitacaoEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    licitacao?: boolean | LicitacaoDefaultArgs<ExtArgs>
    createdBy?: boolean | LicitacaoEvent$createdByArgs<ExtArgs>
  }

  export type $LicitacaoEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LicitacaoEvent"
    objects: {
      licitacao: Prisma.$LicitacaoPayload<ExtArgs>
      createdBy: Prisma.$AppUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      licitacaoId: string
      eventAt: Date
      oldStatus: $Enums.LicitacaoStatus | null
      newStatus: $Enums.LicitacaoStatus | null
      description: string | null
      createdById: string | null
    }, ExtArgs["result"]["licitacaoEvent"]>
    composites: {}
  }

  type LicitacaoEventGetPayload<S extends boolean | null | undefined | LicitacaoEventDefaultArgs> = $Result.GetResult<Prisma.$LicitacaoEventPayload, S>

  type LicitacaoEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LicitacaoEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LicitacaoEventCountAggregateInputType | true
    }

  export interface LicitacaoEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LicitacaoEvent'], meta: { name: 'LicitacaoEvent' } }
    /**
     * Find zero or one LicitacaoEvent that matches the filter.
     * @param {LicitacaoEventFindUniqueArgs} args - Arguments to find a LicitacaoEvent
     * @example
     * // Get one LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicitacaoEventFindUniqueArgs>(args: SelectSubset<T, LicitacaoEventFindUniqueArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LicitacaoEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LicitacaoEventFindUniqueOrThrowArgs} args - Arguments to find a LicitacaoEvent
     * @example
     * // Get one LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicitacaoEventFindUniqueOrThrowArgs>(args: SelectSubset<T, LicitacaoEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LicitacaoEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventFindFirstArgs} args - Arguments to find a LicitacaoEvent
     * @example
     * // Get one LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicitacaoEventFindFirstArgs>(args?: SelectSubset<T, LicitacaoEventFindFirstArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LicitacaoEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventFindFirstOrThrowArgs} args - Arguments to find a LicitacaoEvent
     * @example
     * // Get one LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicitacaoEventFindFirstOrThrowArgs>(args?: SelectSubset<T, LicitacaoEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LicitacaoEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LicitacaoEvents
     * const licitacaoEvents = await prisma.licitacaoEvent.findMany()
     * 
     * // Get first 10 LicitacaoEvents
     * const licitacaoEvents = await prisma.licitacaoEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licitacaoEventWithIdOnly = await prisma.licitacaoEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicitacaoEventFindManyArgs>(args?: SelectSubset<T, LicitacaoEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LicitacaoEvent.
     * @param {LicitacaoEventCreateArgs} args - Arguments to create a LicitacaoEvent.
     * @example
     * // Create one LicitacaoEvent
     * const LicitacaoEvent = await prisma.licitacaoEvent.create({
     *   data: {
     *     // ... data to create a LicitacaoEvent
     *   }
     * })
     * 
     */
    create<T extends LicitacaoEventCreateArgs>(args: SelectSubset<T, LicitacaoEventCreateArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LicitacaoEvents.
     * @param {LicitacaoEventCreateManyArgs} args - Arguments to create many LicitacaoEvents.
     * @example
     * // Create many LicitacaoEvents
     * const licitacaoEvent = await prisma.licitacaoEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicitacaoEventCreateManyArgs>(args?: SelectSubset<T, LicitacaoEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LicitacaoEvents and returns the data saved in the database.
     * @param {LicitacaoEventCreateManyAndReturnArgs} args - Arguments to create many LicitacaoEvents.
     * @example
     * // Create many LicitacaoEvents
     * const licitacaoEvent = await prisma.licitacaoEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LicitacaoEvents and only return the `id`
     * const licitacaoEventWithIdOnly = await prisma.licitacaoEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LicitacaoEventCreateManyAndReturnArgs>(args?: SelectSubset<T, LicitacaoEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LicitacaoEvent.
     * @param {LicitacaoEventDeleteArgs} args - Arguments to delete one LicitacaoEvent.
     * @example
     * // Delete one LicitacaoEvent
     * const LicitacaoEvent = await prisma.licitacaoEvent.delete({
     *   where: {
     *     // ... filter to delete one LicitacaoEvent
     *   }
     * })
     * 
     */
    delete<T extends LicitacaoEventDeleteArgs>(args: SelectSubset<T, LicitacaoEventDeleteArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LicitacaoEvent.
     * @param {LicitacaoEventUpdateArgs} args - Arguments to update one LicitacaoEvent.
     * @example
     * // Update one LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicitacaoEventUpdateArgs>(args: SelectSubset<T, LicitacaoEventUpdateArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LicitacaoEvents.
     * @param {LicitacaoEventDeleteManyArgs} args - Arguments to filter LicitacaoEvents to delete.
     * @example
     * // Delete a few LicitacaoEvents
     * const { count } = await prisma.licitacaoEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicitacaoEventDeleteManyArgs>(args?: SelectSubset<T, LicitacaoEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LicitacaoEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LicitacaoEvents
     * const licitacaoEvent = await prisma.licitacaoEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicitacaoEventUpdateManyArgs>(args: SelectSubset<T, LicitacaoEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LicitacaoEvent.
     * @param {LicitacaoEventUpsertArgs} args - Arguments to update or create a LicitacaoEvent.
     * @example
     * // Update or create a LicitacaoEvent
     * const licitacaoEvent = await prisma.licitacaoEvent.upsert({
     *   create: {
     *     // ... data to create a LicitacaoEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LicitacaoEvent we want to update
     *   }
     * })
     */
    upsert<T extends LicitacaoEventUpsertArgs>(args: SelectSubset<T, LicitacaoEventUpsertArgs<ExtArgs>>): Prisma__LicitacaoEventClient<$Result.GetResult<Prisma.$LicitacaoEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LicitacaoEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventCountArgs} args - Arguments to filter LicitacaoEvents to count.
     * @example
     * // Count the number of LicitacaoEvents
     * const count = await prisma.licitacaoEvent.count({
     *   where: {
     *     // ... the filter for the LicitacaoEvents we want to count
     *   }
     * })
    **/
    count<T extends LicitacaoEventCountArgs>(
      args?: Subset<T, LicitacaoEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicitacaoEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LicitacaoEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicitacaoEventAggregateArgs>(args: Subset<T, LicitacaoEventAggregateArgs>): Prisma.PrismaPromise<GetLicitacaoEventAggregateType<T>>

    /**
     * Group by LicitacaoEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicitacaoEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicitacaoEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicitacaoEventGroupByArgs['orderBy'] }
        : { orderBy?: LicitacaoEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicitacaoEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicitacaoEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LicitacaoEvent model
   */
  readonly fields: LicitacaoEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LicitacaoEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicitacaoEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    licitacao<T extends LicitacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LicitacaoDefaultArgs<ExtArgs>>): Prisma__LicitacaoClient<$Result.GetResult<Prisma.$LicitacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends LicitacaoEvent$createdByArgs<ExtArgs> = {}>(args?: Subset<T, LicitacaoEvent$createdByArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LicitacaoEvent model
   */ 
  interface LicitacaoEventFieldRefs {
    readonly id: FieldRef<"LicitacaoEvent", 'String'>
    readonly licitacaoId: FieldRef<"LicitacaoEvent", 'String'>
    readonly eventAt: FieldRef<"LicitacaoEvent", 'DateTime'>
    readonly oldStatus: FieldRef<"LicitacaoEvent", 'LicitacaoStatus'>
    readonly newStatus: FieldRef<"LicitacaoEvent", 'LicitacaoStatus'>
    readonly description: FieldRef<"LicitacaoEvent", 'String'>
    readonly createdById: FieldRef<"LicitacaoEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LicitacaoEvent findUnique
   */
  export type LicitacaoEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoEvent to fetch.
     */
    where: LicitacaoEventWhereUniqueInput
  }

  /**
   * LicitacaoEvent findUniqueOrThrow
   */
  export type LicitacaoEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoEvent to fetch.
     */
    where: LicitacaoEventWhereUniqueInput
  }

  /**
   * LicitacaoEvent findFirst
   */
  export type LicitacaoEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoEvent to fetch.
     */
    where?: LicitacaoEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoEvents to fetch.
     */
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicitacaoEvents.
     */
    cursor?: LicitacaoEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicitacaoEvents.
     */
    distinct?: LicitacaoEventScalarFieldEnum | LicitacaoEventScalarFieldEnum[]
  }

  /**
   * LicitacaoEvent findFirstOrThrow
   */
  export type LicitacaoEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoEvent to fetch.
     */
    where?: LicitacaoEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoEvents to fetch.
     */
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicitacaoEvents.
     */
    cursor?: LicitacaoEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicitacaoEvents.
     */
    distinct?: LicitacaoEventScalarFieldEnum | LicitacaoEventScalarFieldEnum[]
  }

  /**
   * LicitacaoEvent findMany
   */
  export type LicitacaoEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter, which LicitacaoEvents to fetch.
     */
    where?: LicitacaoEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicitacaoEvents to fetch.
     */
    orderBy?: LicitacaoEventOrderByWithRelationInput | LicitacaoEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LicitacaoEvents.
     */
    cursor?: LicitacaoEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicitacaoEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicitacaoEvents.
     */
    skip?: number
    distinct?: LicitacaoEventScalarFieldEnum | LicitacaoEventScalarFieldEnum[]
  }

  /**
   * LicitacaoEvent create
   */
  export type LicitacaoEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * The data needed to create a LicitacaoEvent.
     */
    data: XOR<LicitacaoEventCreateInput, LicitacaoEventUncheckedCreateInput>
  }

  /**
   * LicitacaoEvent createMany
   */
  export type LicitacaoEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LicitacaoEvents.
     */
    data: LicitacaoEventCreateManyInput | LicitacaoEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LicitacaoEvent createManyAndReturn
   */
  export type LicitacaoEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LicitacaoEvents.
     */
    data: LicitacaoEventCreateManyInput | LicitacaoEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LicitacaoEvent update
   */
  export type LicitacaoEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * The data needed to update a LicitacaoEvent.
     */
    data: XOR<LicitacaoEventUpdateInput, LicitacaoEventUncheckedUpdateInput>
    /**
     * Choose, which LicitacaoEvent to update.
     */
    where: LicitacaoEventWhereUniqueInput
  }

  /**
   * LicitacaoEvent updateMany
   */
  export type LicitacaoEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LicitacaoEvents.
     */
    data: XOR<LicitacaoEventUpdateManyMutationInput, LicitacaoEventUncheckedUpdateManyInput>
    /**
     * Filter which LicitacaoEvents to update
     */
    where?: LicitacaoEventWhereInput
  }

  /**
   * LicitacaoEvent upsert
   */
  export type LicitacaoEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * The filter to search for the LicitacaoEvent to update in case it exists.
     */
    where: LicitacaoEventWhereUniqueInput
    /**
     * In case the LicitacaoEvent found by the `where` argument doesn't exist, create a new LicitacaoEvent with this data.
     */
    create: XOR<LicitacaoEventCreateInput, LicitacaoEventUncheckedCreateInput>
    /**
     * In case the LicitacaoEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicitacaoEventUpdateInput, LicitacaoEventUncheckedUpdateInput>
  }

  /**
   * LicitacaoEvent delete
   */
  export type LicitacaoEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
    /**
     * Filter which LicitacaoEvent to delete.
     */
    where: LicitacaoEventWhereUniqueInput
  }

  /**
   * LicitacaoEvent deleteMany
   */
  export type LicitacaoEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicitacaoEvents to delete
     */
    where?: LicitacaoEventWhereInput
  }

  /**
   * LicitacaoEvent.createdBy
   */
  export type LicitacaoEvent$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    where?: AppUserWhereInput
  }

  /**
   * LicitacaoEvent without action
   */
  export type LicitacaoEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicitacaoEvent
     */
    select?: LicitacaoEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicitacaoEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AppUserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppUserScalarFieldEnum = (typeof AppUserScalarFieldEnum)[keyof typeof AppUserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cnpj: 'cnpj',
    phone: 'phone',
    address: 'address',
    logoPath: 'logoPath',
    letterheadPath: 'letterheadPath',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const CompanyMemberScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyMemberScalarFieldEnum = (typeof CompanyMemberScalarFieldEnum)[keyof typeof CompanyMemberScalarFieldEnum]


  export const CompanyDocumentScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    docType: 'docType',
    docNumber: 'docNumber',
    issuer: 'issuer',
    issueDate: 'issueDate',
    expiresAt: 'expiresAt',
    filePath: 'filePath',
    notes: 'notes',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyDocumentScalarFieldEnum = (typeof CompanyDocumentScalarFieldEnum)[keyof typeof CompanyDocumentScalarFieldEnum]


  export const LicitacaoScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    title: 'title',
    orgao: 'orgao',
    modalidade: 'modalidade',
    editalUrl: 'editalUrl',
    sessionAt: 'sessionAt',
    submissionDeadline: 'submissionDeadline',
    status: 'status',
    saleValue: 'saleValue',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LicitacaoScalarFieldEnum = (typeof LicitacaoScalarFieldEnum)[keyof typeof LicitacaoScalarFieldEnum]


  export const LicitacaoDocumentScalarFieldEnum: {
    id: 'id',
    licitacaoId: 'licitacaoId',
    docType: 'docType',
    required: 'required',
    submitted: 'submitted',
    signed: 'signed',
    issueDate: 'issueDate',
    expiresAt: 'expiresAt',
    filePath: 'filePath',
    generatedFromTemplate: 'generatedFromTemplate',
    templatePath: 'templatePath',
    version: 'version',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LicitacaoDocumentScalarFieldEnum = (typeof LicitacaoDocumentScalarFieldEnum)[keyof typeof LicitacaoDocumentScalarFieldEnum]


  export const LicitacaoEventScalarFieldEnum: {
    id: 'id',
    licitacaoId: 'licitacaoId',
    eventAt: 'eventAt',
    oldStatus: 'oldStatus',
    newStatus: 'newStatus',
    description: 'description',
    createdById: 'createdById'
  };

  export type LicitacaoEventScalarFieldEnum = (typeof LicitacaoEventScalarFieldEnum)[keyof typeof LicitacaoEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'RoleCompany'
   */
  export type EnumRoleCompanyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleCompany'>
    


  /**
   * Reference to a field of type 'RoleCompany[]'
   */
  export type ListEnumRoleCompanyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleCompany[]'>
    


  /**
   * Reference to a field of type 'CompanyDocType'
   */
  export type EnumCompanyDocTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyDocType'>
    


  /**
   * Reference to a field of type 'CompanyDocType[]'
   */
  export type ListEnumCompanyDocTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyDocType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'LicitacaoStatus'
   */
  export type EnumLicitacaoStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicitacaoStatus'>
    


  /**
   * Reference to a field of type 'LicitacaoStatus[]'
   */
  export type ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicitacaoStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'LicitacaoDocType'
   */
  export type EnumLicitacaoDocTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicitacaoDocType'>
    


  /**
   * Reference to a field of type 'LicitacaoDocType[]'
   */
  export type ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicitacaoDocType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AppUserWhereInput = {
    AND?: AppUserWhereInput | AppUserWhereInput[]
    OR?: AppUserWhereInput[]
    NOT?: AppUserWhereInput | AppUserWhereInput[]
    id?: StringFilter<"AppUser"> | string
    fullName?: StringNullableFilter<"AppUser"> | string | null
    email?: StringFilter<"AppUser"> | string
    passwordHash?: StringFilter<"AppUser"> | string
    createdAt?: DateTimeFilter<"AppUser"> | Date | string
    updatedAt?: DateTimeFilter<"AppUser"> | Date | string
    createdCompanies?: CompanyListRelationFilter
    memberships?: CompanyMemberListRelationFilter
    events?: LicitacaoEventListRelationFilter
  }

  export type AppUserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrderInput | SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdCompanies?: CompanyOrderByRelationAggregateInput
    memberships?: CompanyMemberOrderByRelationAggregateInput
    events?: LicitacaoEventOrderByRelationAggregateInput
  }

  export type AppUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AppUserWhereInput | AppUserWhereInput[]
    OR?: AppUserWhereInput[]
    NOT?: AppUserWhereInput | AppUserWhereInput[]
    fullName?: StringNullableFilter<"AppUser"> | string | null
    passwordHash?: StringFilter<"AppUser"> | string
    createdAt?: DateTimeFilter<"AppUser"> | Date | string
    updatedAt?: DateTimeFilter<"AppUser"> | Date | string
    createdCompanies?: CompanyListRelationFilter
    memberships?: CompanyMemberListRelationFilter
    events?: LicitacaoEventListRelationFilter
  }, "id" | "email">

  export type AppUserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrderInput | SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppUserCountOrderByAggregateInput
    _max?: AppUserMaxOrderByAggregateInput
    _min?: AppUserMinOrderByAggregateInput
  }

  export type AppUserScalarWhereWithAggregatesInput = {
    AND?: AppUserScalarWhereWithAggregatesInput | AppUserScalarWhereWithAggregatesInput[]
    OR?: AppUserScalarWhereWithAggregatesInput[]
    NOT?: AppUserScalarWhereWithAggregatesInput | AppUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppUser"> | string
    fullName?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    email?: StringWithAggregatesFilter<"AppUser"> | string
    passwordHash?: StringWithAggregatesFilter<"AppUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppUser"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    cnpj?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    logoPath?: StringNullableFilter<"Company"> | string | null
    letterheadPath?: StringNullableFilter<"Company"> | string | null
    active?: BoolFilter<"Company"> | boolean
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdById?: StringFilter<"Company"> | string
    createdBy?: XOR<AppUserRelationFilter, AppUserWhereInput>
    members?: CompanyMemberListRelationFilter
    documents?: CompanyDocumentListRelationFilter
    licitacoes?: LicitacaoListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logoPath?: SortOrderInput | SortOrder
    letterheadPath?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    createdBy?: AppUserOrderByWithRelationInput
    members?: CompanyMemberOrderByRelationAggregateInput
    documents?: CompanyDocumentOrderByRelationAggregateInput
    licitacoes?: LicitacaoOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cnpj?: string
    createdById?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    logoPath?: StringNullableFilter<"Company"> | string | null
    letterheadPath?: StringNullableFilter<"Company"> | string | null
    active?: BoolFilter<"Company"> | boolean
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdBy?: XOR<AppUserRelationFilter, AppUserWhereInput>
    members?: CompanyMemberListRelationFilter
    documents?: CompanyDocumentListRelationFilter
    licitacoes?: LicitacaoListRelationFilter
  }, "id" | "cnpj" | "createdById">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logoPath?: SortOrderInput | SortOrder
    letterheadPath?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    cnpj?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    logoPath?: StringNullableWithAggregatesFilter<"Company"> | string | null
    letterheadPath?: StringNullableWithAggregatesFilter<"Company"> | string | null
    active?: BoolWithAggregatesFilter<"Company"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    createdById?: StringWithAggregatesFilter<"Company"> | string
  }

  export type CompanyMemberWhereInput = {
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    id?: StringFilter<"CompanyMember"> | string
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumRoleCompanyFilter<"CompanyMember"> | $Enums.RoleCompany
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<AppUserRelationFilter, AppUserWhereInput>
  }

  export type CompanyMemberOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user?: AppUserOrderByWithRelationInput
  }

  export type CompanyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_userId?: CompanyMemberCompanyIdUserIdCompoundUniqueInput
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumRoleCompanyFilter<"CompanyMember"> | $Enums.RoleCompany
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<AppUserRelationFilter, AppUserWhereInput>
  }, "id" | "companyId_userId">

  export type CompanyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyMemberCountOrderByAggregateInput
    _max?: CompanyMemberMaxOrderByAggregateInput
    _min?: CompanyMemberMinOrderByAggregateInput
  }

  export type CompanyMemberScalarWhereWithAggregatesInput = {
    AND?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    OR?: CompanyMemberScalarWhereWithAggregatesInput[]
    NOT?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyMember"> | string
    companyId?: StringWithAggregatesFilter<"CompanyMember"> | string
    userId?: StringWithAggregatesFilter<"CompanyMember"> | string
    role?: EnumRoleCompanyWithAggregatesFilter<"CompanyMember"> | $Enums.RoleCompany
    createdAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
  }

  export type CompanyDocumentWhereInput = {
    AND?: CompanyDocumentWhereInput | CompanyDocumentWhereInput[]
    OR?: CompanyDocumentWhereInput[]
    NOT?: CompanyDocumentWhereInput | CompanyDocumentWhereInput[]
    id?: StringFilter<"CompanyDocument"> | string
    companyId?: StringFilter<"CompanyDocument"> | string
    docType?: EnumCompanyDocTypeFilter<"CompanyDocument"> | $Enums.CompanyDocType
    docNumber?: StringNullableFilter<"CompanyDocument"> | string | null
    issuer?: StringNullableFilter<"CompanyDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    filePath?: StringNullableFilter<"CompanyDocument"> | string | null
    notes?: StringNullableFilter<"CompanyDocument"> | string | null
    version?: IntFilter<"CompanyDocument"> | number
    createdAt?: DateTimeFilter<"CompanyDocument"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyDocument"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type CompanyDocumentOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    docType?: SortOrder
    docNumber?: SortOrderInput | SortOrder
    issuer?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CompanyDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyDocumentWhereInput | CompanyDocumentWhereInput[]
    OR?: CompanyDocumentWhereInput[]
    NOT?: CompanyDocumentWhereInput | CompanyDocumentWhereInput[]
    companyId?: StringFilter<"CompanyDocument"> | string
    docType?: EnumCompanyDocTypeFilter<"CompanyDocument"> | $Enums.CompanyDocType
    docNumber?: StringNullableFilter<"CompanyDocument"> | string | null
    issuer?: StringNullableFilter<"CompanyDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    filePath?: StringNullableFilter<"CompanyDocument"> | string | null
    notes?: StringNullableFilter<"CompanyDocument"> | string | null
    version?: IntFilter<"CompanyDocument"> | number
    createdAt?: DateTimeFilter<"CompanyDocument"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyDocument"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type CompanyDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    docType?: SortOrder
    docNumber?: SortOrderInput | SortOrder
    issuer?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyDocumentCountOrderByAggregateInput
    _avg?: CompanyDocumentAvgOrderByAggregateInput
    _max?: CompanyDocumentMaxOrderByAggregateInput
    _min?: CompanyDocumentMinOrderByAggregateInput
    _sum?: CompanyDocumentSumOrderByAggregateInput
  }

  export type CompanyDocumentScalarWhereWithAggregatesInput = {
    AND?: CompanyDocumentScalarWhereWithAggregatesInput | CompanyDocumentScalarWhereWithAggregatesInput[]
    OR?: CompanyDocumentScalarWhereWithAggregatesInput[]
    NOT?: CompanyDocumentScalarWhereWithAggregatesInput | CompanyDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyDocument"> | string
    companyId?: StringWithAggregatesFilter<"CompanyDocument"> | string
    docType?: EnumCompanyDocTypeWithAggregatesFilter<"CompanyDocument"> | $Enums.CompanyDocType
    docNumber?: StringNullableWithAggregatesFilter<"CompanyDocument"> | string | null
    issuer?: StringNullableWithAggregatesFilter<"CompanyDocument"> | string | null
    issueDate?: DateTimeNullableWithAggregatesFilter<"CompanyDocument"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"CompanyDocument"> | Date | string | null
    filePath?: StringNullableWithAggregatesFilter<"CompanyDocument"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CompanyDocument"> | string | null
    version?: IntWithAggregatesFilter<"CompanyDocument"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CompanyDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyDocument"> | Date | string
  }

  export type LicitacaoWhereInput = {
    AND?: LicitacaoWhereInput | LicitacaoWhereInput[]
    OR?: LicitacaoWhereInput[]
    NOT?: LicitacaoWhereInput | LicitacaoWhereInput[]
    id?: StringFilter<"Licitacao"> | string
    companyId?: StringFilter<"Licitacao"> | string
    title?: StringFilter<"Licitacao"> | string
    orgao?: StringNullableFilter<"Licitacao"> | string | null
    modalidade?: StringNullableFilter<"Licitacao"> | string | null
    editalUrl?: StringNullableFilter<"Licitacao"> | string | null
    sessionAt?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    submissionDeadline?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    status?: EnumLicitacaoStatusFilter<"Licitacao"> | $Enums.LicitacaoStatus
    saleValue?: DecimalNullableFilter<"Licitacao"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"Licitacao"> | string | null
    createdAt?: DateTimeFilter<"Licitacao"> | Date | string
    updatedAt?: DateTimeFilter<"Licitacao"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    documents?: LicitacaoDocumentListRelationFilter
    events?: LicitacaoEventListRelationFilter
  }

  export type LicitacaoOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    orgao?: SortOrderInput | SortOrder
    modalidade?: SortOrderInput | SortOrder
    editalUrl?: SortOrderInput | SortOrder
    sessionAt?: SortOrderInput | SortOrder
    submissionDeadline?: SortOrderInput | SortOrder
    status?: SortOrder
    saleValue?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    documents?: LicitacaoDocumentOrderByRelationAggregateInput
    events?: LicitacaoEventOrderByRelationAggregateInput
  }

  export type LicitacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LicitacaoWhereInput | LicitacaoWhereInput[]
    OR?: LicitacaoWhereInput[]
    NOT?: LicitacaoWhereInput | LicitacaoWhereInput[]
    companyId?: StringFilter<"Licitacao"> | string
    title?: StringFilter<"Licitacao"> | string
    orgao?: StringNullableFilter<"Licitacao"> | string | null
    modalidade?: StringNullableFilter<"Licitacao"> | string | null
    editalUrl?: StringNullableFilter<"Licitacao"> | string | null
    sessionAt?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    submissionDeadline?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    status?: EnumLicitacaoStatusFilter<"Licitacao"> | $Enums.LicitacaoStatus
    saleValue?: DecimalNullableFilter<"Licitacao"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"Licitacao"> | string | null
    createdAt?: DateTimeFilter<"Licitacao"> | Date | string
    updatedAt?: DateTimeFilter<"Licitacao"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    documents?: LicitacaoDocumentListRelationFilter
    events?: LicitacaoEventListRelationFilter
  }, "id">

  export type LicitacaoOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    orgao?: SortOrderInput | SortOrder
    modalidade?: SortOrderInput | SortOrder
    editalUrl?: SortOrderInput | SortOrder
    sessionAt?: SortOrderInput | SortOrder
    submissionDeadline?: SortOrderInput | SortOrder
    status?: SortOrder
    saleValue?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LicitacaoCountOrderByAggregateInput
    _avg?: LicitacaoAvgOrderByAggregateInput
    _max?: LicitacaoMaxOrderByAggregateInput
    _min?: LicitacaoMinOrderByAggregateInput
    _sum?: LicitacaoSumOrderByAggregateInput
  }

  export type LicitacaoScalarWhereWithAggregatesInput = {
    AND?: LicitacaoScalarWhereWithAggregatesInput | LicitacaoScalarWhereWithAggregatesInput[]
    OR?: LicitacaoScalarWhereWithAggregatesInput[]
    NOT?: LicitacaoScalarWhereWithAggregatesInput | LicitacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Licitacao"> | string
    companyId?: StringWithAggregatesFilter<"Licitacao"> | string
    title?: StringWithAggregatesFilter<"Licitacao"> | string
    orgao?: StringNullableWithAggregatesFilter<"Licitacao"> | string | null
    modalidade?: StringNullableWithAggregatesFilter<"Licitacao"> | string | null
    editalUrl?: StringNullableWithAggregatesFilter<"Licitacao"> | string | null
    sessionAt?: DateTimeNullableWithAggregatesFilter<"Licitacao"> | Date | string | null
    submissionDeadline?: DateTimeNullableWithAggregatesFilter<"Licitacao"> | Date | string | null
    status?: EnumLicitacaoStatusWithAggregatesFilter<"Licitacao"> | $Enums.LicitacaoStatus
    saleValue?: DecimalNullableWithAggregatesFilter<"Licitacao"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableWithAggregatesFilter<"Licitacao"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Licitacao"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Licitacao"> | Date | string
  }

  export type LicitacaoDocumentWhereInput = {
    AND?: LicitacaoDocumentWhereInput | LicitacaoDocumentWhereInput[]
    OR?: LicitacaoDocumentWhereInput[]
    NOT?: LicitacaoDocumentWhereInput | LicitacaoDocumentWhereInput[]
    id?: StringFilter<"LicitacaoDocument"> | string
    licitacaoId?: StringFilter<"LicitacaoDocument"> | string
    docType?: EnumLicitacaoDocTypeFilter<"LicitacaoDocument"> | $Enums.LicitacaoDocType
    required?: BoolFilter<"LicitacaoDocument"> | boolean
    submitted?: BoolFilter<"LicitacaoDocument"> | boolean
    signed?: BoolFilter<"LicitacaoDocument"> | boolean
    issueDate?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    filePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    generatedFromTemplate?: BoolFilter<"LicitacaoDocument"> | boolean
    templatePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    version?: IntFilter<"LicitacaoDocument"> | number
    notes?: StringNullableFilter<"LicitacaoDocument"> | string | null
    createdAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
    updatedAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
    licitacao?: XOR<LicitacaoRelationFilter, LicitacaoWhereInput>
  }

  export type LicitacaoDocumentOrderByWithRelationInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    docType?: SortOrder
    required?: SortOrder
    submitted?: SortOrder
    signed?: SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    generatedFromTemplate?: SortOrder
    templatePath?: SortOrderInput | SortOrder
    version?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    licitacao?: LicitacaoOrderByWithRelationInput
  }

  export type LicitacaoDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LicitacaoDocumentWhereInput | LicitacaoDocumentWhereInput[]
    OR?: LicitacaoDocumentWhereInput[]
    NOT?: LicitacaoDocumentWhereInput | LicitacaoDocumentWhereInput[]
    licitacaoId?: StringFilter<"LicitacaoDocument"> | string
    docType?: EnumLicitacaoDocTypeFilter<"LicitacaoDocument"> | $Enums.LicitacaoDocType
    required?: BoolFilter<"LicitacaoDocument"> | boolean
    submitted?: BoolFilter<"LicitacaoDocument"> | boolean
    signed?: BoolFilter<"LicitacaoDocument"> | boolean
    issueDate?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    filePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    generatedFromTemplate?: BoolFilter<"LicitacaoDocument"> | boolean
    templatePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    version?: IntFilter<"LicitacaoDocument"> | number
    notes?: StringNullableFilter<"LicitacaoDocument"> | string | null
    createdAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
    updatedAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
    licitacao?: XOR<LicitacaoRelationFilter, LicitacaoWhereInput>
  }, "id">

  export type LicitacaoDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    docType?: SortOrder
    required?: SortOrder
    submitted?: SortOrder
    signed?: SortOrder
    issueDate?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    generatedFromTemplate?: SortOrder
    templatePath?: SortOrderInput | SortOrder
    version?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LicitacaoDocumentCountOrderByAggregateInput
    _avg?: LicitacaoDocumentAvgOrderByAggregateInput
    _max?: LicitacaoDocumentMaxOrderByAggregateInput
    _min?: LicitacaoDocumentMinOrderByAggregateInput
    _sum?: LicitacaoDocumentSumOrderByAggregateInput
  }

  export type LicitacaoDocumentScalarWhereWithAggregatesInput = {
    AND?: LicitacaoDocumentScalarWhereWithAggregatesInput | LicitacaoDocumentScalarWhereWithAggregatesInput[]
    OR?: LicitacaoDocumentScalarWhereWithAggregatesInput[]
    NOT?: LicitacaoDocumentScalarWhereWithAggregatesInput | LicitacaoDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LicitacaoDocument"> | string
    licitacaoId?: StringWithAggregatesFilter<"LicitacaoDocument"> | string
    docType?: EnumLicitacaoDocTypeWithAggregatesFilter<"LicitacaoDocument"> | $Enums.LicitacaoDocType
    required?: BoolWithAggregatesFilter<"LicitacaoDocument"> | boolean
    submitted?: BoolWithAggregatesFilter<"LicitacaoDocument"> | boolean
    signed?: BoolWithAggregatesFilter<"LicitacaoDocument"> | boolean
    issueDate?: DateTimeNullableWithAggregatesFilter<"LicitacaoDocument"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"LicitacaoDocument"> | Date | string | null
    filePath?: StringNullableWithAggregatesFilter<"LicitacaoDocument"> | string | null
    generatedFromTemplate?: BoolWithAggregatesFilter<"LicitacaoDocument"> | boolean
    templatePath?: StringNullableWithAggregatesFilter<"LicitacaoDocument"> | string | null
    version?: IntWithAggregatesFilter<"LicitacaoDocument"> | number
    notes?: StringNullableWithAggregatesFilter<"LicitacaoDocument"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LicitacaoDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LicitacaoDocument"> | Date | string
  }

  export type LicitacaoEventWhereInput = {
    AND?: LicitacaoEventWhereInput | LicitacaoEventWhereInput[]
    OR?: LicitacaoEventWhereInput[]
    NOT?: LicitacaoEventWhereInput | LicitacaoEventWhereInput[]
    id?: StringFilter<"LicitacaoEvent"> | string
    licitacaoId?: StringFilter<"LicitacaoEvent"> | string
    eventAt?: DateTimeFilter<"LicitacaoEvent"> | Date | string
    oldStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    newStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    description?: StringNullableFilter<"LicitacaoEvent"> | string | null
    createdById?: StringNullableFilter<"LicitacaoEvent"> | string | null
    licitacao?: XOR<LicitacaoRelationFilter, LicitacaoWhereInput>
    createdBy?: XOR<AppUserNullableRelationFilter, AppUserWhereInput> | null
  }

  export type LicitacaoEventOrderByWithRelationInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    eventAt?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    licitacao?: LicitacaoOrderByWithRelationInput
    createdBy?: AppUserOrderByWithRelationInput
  }

  export type LicitacaoEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LicitacaoEventWhereInput | LicitacaoEventWhereInput[]
    OR?: LicitacaoEventWhereInput[]
    NOT?: LicitacaoEventWhereInput | LicitacaoEventWhereInput[]
    licitacaoId?: StringFilter<"LicitacaoEvent"> | string
    eventAt?: DateTimeFilter<"LicitacaoEvent"> | Date | string
    oldStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    newStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    description?: StringNullableFilter<"LicitacaoEvent"> | string | null
    createdById?: StringNullableFilter<"LicitacaoEvent"> | string | null
    licitacao?: XOR<LicitacaoRelationFilter, LicitacaoWhereInput>
    createdBy?: XOR<AppUserNullableRelationFilter, AppUserWhereInput> | null
  }, "id">

  export type LicitacaoEventOrderByWithAggregationInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    eventAt?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: LicitacaoEventCountOrderByAggregateInput
    _max?: LicitacaoEventMaxOrderByAggregateInput
    _min?: LicitacaoEventMinOrderByAggregateInput
  }

  export type LicitacaoEventScalarWhereWithAggregatesInput = {
    AND?: LicitacaoEventScalarWhereWithAggregatesInput | LicitacaoEventScalarWhereWithAggregatesInput[]
    OR?: LicitacaoEventScalarWhereWithAggregatesInput[]
    NOT?: LicitacaoEventScalarWhereWithAggregatesInput | LicitacaoEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LicitacaoEvent"> | string
    licitacaoId?: StringWithAggregatesFilter<"LicitacaoEvent"> | string
    eventAt?: DateTimeWithAggregatesFilter<"LicitacaoEvent"> | Date | string
    oldStatus?: EnumLicitacaoStatusNullableWithAggregatesFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    newStatus?: EnumLicitacaoStatusNullableWithAggregatesFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    description?: StringNullableWithAggregatesFilter<"LicitacaoEvent"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"LicitacaoEvent"> | string | null
  }

  export type AppUserCreateInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    memberships?: CompanyMemberCreateNestedManyWithoutUserInput
    events?: LicitacaoEventCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserUncheckedCreateInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    memberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    memberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    events?: LicitacaoEventUpdateManyWithoutCreatedByNestedInput
  }

  export type AppUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    memberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    events?: LicitacaoEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AppUserCreateManyInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: AppUserCreateNestedOneWithoutCreatedCompaniesInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentUncheckedCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: AppUserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUncheckedUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyMemberCreateInput = {
    id?: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
    user: AppUserCreateNestedOneWithoutMembershipsInput
  }

  export type CompanyMemberUncheckedCreateInput = {
    id?: string
    companyId: string
    userId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
    user?: AppUserUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type CompanyMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberCreateManyInput = {
    id?: string
    companyId: string
    userId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentCreateInput = {
    id?: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDocumentsInput
  }

  export type CompanyDocumentUncheckedCreateInput = {
    id?: string
    companyId: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type CompanyDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentCreateManyInput = {
    id?: string
    companyId: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoCreateInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutLicitacoesInput
    documents?: LicitacaoDocumentCreateNestedManyWithoutLicitacaoInput
    events?: LicitacaoEventCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoUncheckedCreateInput = {
    id?: string
    companyId: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: LicitacaoDocumentUncheckedCreateNestedManyWithoutLicitacaoInput
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutLicitacoesNestedInput
    documents?: LicitacaoDocumentUpdateManyWithoutLicitacaoNestedInput
    events?: LicitacaoEventUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoNestedInput
    events?: LicitacaoEventUncheckedUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoCreateManyInput = {
    id?: string
    companyId: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentCreateInput = {
    id?: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    licitacao: LicitacaoCreateNestedOneWithoutDocumentsInput
  }

  export type LicitacaoDocumentUncheckedCreateInput = {
    id?: string
    licitacaoId: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licitacao?: LicitacaoUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type LicitacaoDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentCreateManyInput = {
    id?: string
    licitacaoId: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoEventCreateInput = {
    id?: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    licitacao: LicitacaoCreateNestedOneWithoutEventsInput
    createdBy?: AppUserCreateNestedOneWithoutEventsInput
  }

  export type LicitacaoEventUncheckedCreateInput = {
    id?: string
    licitacaoId: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    createdById?: string | null
  }

  export type LicitacaoEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    licitacao?: LicitacaoUpdateOneRequiredWithoutEventsNestedInput
    createdBy?: AppUserUpdateOneWithoutEventsNestedInput
  }

  export type LicitacaoEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicitacaoEventCreateManyInput = {
    id?: string
    licitacaoId: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    createdById?: string | null
  }

  export type LicitacaoEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicitacaoEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type CompanyMemberListRelationFilter = {
    every?: CompanyMemberWhereInput
    some?: CompanyMemberWhereInput
    none?: CompanyMemberWhereInput
  }

  export type LicitacaoEventListRelationFilter = {
    every?: LicitacaoEventWhereInput
    some?: LicitacaoEventWhereInput
    none?: LicitacaoEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LicitacaoEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppUserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppUserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppUserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AppUserRelationFilter = {
    is?: AppUserWhereInput
    isNot?: AppUserWhereInput
  }

  export type CompanyDocumentListRelationFilter = {
    every?: CompanyDocumentWhereInput
    some?: CompanyDocumentWhereInput
    none?: CompanyDocumentWhereInput
  }

  export type LicitacaoListRelationFilter = {
    every?: LicitacaoWhereInput
    some?: LicitacaoWhereInput
    none?: LicitacaoWhereInput
  }

  export type CompanyDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LicitacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logoPath?: SortOrder
    letterheadPath?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logoPath?: SortOrder
    letterheadPath?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logoPath?: SortOrder
    letterheadPath?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleCompanyFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleCompany | EnumRoleCompanyFieldRefInput<$PrismaModel>
    in?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleCompanyFilter<$PrismaModel> | $Enums.RoleCompany
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type CompanyMemberCompanyIdUserIdCompoundUniqueInput = {
    companyId: string
    userId: string
  }

  export type CompanyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleCompanyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleCompany | EnumRoleCompanyFieldRefInput<$PrismaModel>
    in?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleCompanyWithAggregatesFilter<$PrismaModel> | $Enums.RoleCompany
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleCompanyFilter<$PrismaModel>
    _max?: NestedEnumRoleCompanyFilter<$PrismaModel>
  }

  export type EnumCompanyDocTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyDocType | EnumCompanyDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyDocTypeFilter<$PrismaModel> | $Enums.CompanyDocType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CompanyDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    docType?: SortOrder
    docNumber?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    notes?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyDocumentAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type CompanyDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    docType?: SortOrder
    docNumber?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    notes?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    docType?: SortOrder
    docNumber?: SortOrder
    issuer?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    notes?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyDocumentSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type EnumCompanyDocTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyDocType | EnumCompanyDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyDocTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompanyDocType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyDocTypeFilter<$PrismaModel>
    _max?: NestedEnumCompanyDocTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumLicitacaoStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoStatusFilter<$PrismaModel> | $Enums.LicitacaoStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type LicitacaoDocumentListRelationFilter = {
    every?: LicitacaoDocumentWhereInput
    some?: LicitacaoDocumentWhereInput
    none?: LicitacaoDocumentWhereInput
  }

  export type LicitacaoDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LicitacaoCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    orgao?: SortOrder
    modalidade?: SortOrder
    editalUrl?: SortOrder
    sessionAt?: SortOrder
    submissionDeadline?: SortOrder
    status?: SortOrder
    saleValue?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoAvgOrderByAggregateInput = {
    saleValue?: SortOrder
  }

  export type LicitacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    orgao?: SortOrder
    modalidade?: SortOrder
    editalUrl?: SortOrder
    sessionAt?: SortOrder
    submissionDeadline?: SortOrder
    status?: SortOrder
    saleValue?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    orgao?: SortOrder
    modalidade?: SortOrder
    editalUrl?: SortOrder
    sessionAt?: SortOrder
    submissionDeadline?: SortOrder
    status?: SortOrder
    saleValue?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoSumOrderByAggregateInput = {
    saleValue?: SortOrder
  }

  export type EnumLicitacaoStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoStatusWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoStatusFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumLicitacaoDocTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoDocType | EnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel> | $Enums.LicitacaoDocType
  }

  export type LicitacaoRelationFilter = {
    is?: LicitacaoWhereInput
    isNot?: LicitacaoWhereInput
  }

  export type LicitacaoDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    docType?: SortOrder
    required?: SortOrder
    submitted?: SortOrder
    signed?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    generatedFromTemplate?: SortOrder
    templatePath?: SortOrder
    version?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoDocumentAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type LicitacaoDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    docType?: SortOrder
    required?: SortOrder
    submitted?: SortOrder
    signed?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    generatedFromTemplate?: SortOrder
    templatePath?: SortOrder
    version?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    docType?: SortOrder
    required?: SortOrder
    submitted?: SortOrder
    signed?: SortOrder
    issueDate?: SortOrder
    expiresAt?: SortOrder
    filePath?: SortOrder
    generatedFromTemplate?: SortOrder
    templatePath?: SortOrder
    version?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LicitacaoDocumentSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type EnumLicitacaoDocTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoDocType | EnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoDocTypeWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoDocType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel>
  }

  export type EnumLicitacaoStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel> | $Enums.LicitacaoStatus | null
  }

  export type AppUserNullableRelationFilter = {
    is?: AppUserWhereInput | null
    isNot?: AppUserWhereInput | null
  }

  export type LicitacaoEventCountOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    eventAt?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
  }

  export type LicitacaoEventMaxOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    eventAt?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
  }

  export type LicitacaoEventMinOrderByAggregateInput = {
    id?: SortOrder
    licitacaoId?: SortOrder
    eventAt?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
  }

  export type EnumLicitacaoStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLicitacaoStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel>
  }

  export type CompanyCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type LicitacaoEventCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput> | LicitacaoEventCreateWithoutCreatedByInput[] | LicitacaoEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutCreatedByInput | LicitacaoEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: LicitacaoEventCreateManyCreatedByInputEnvelope
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type LicitacaoEventUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput> | LicitacaoEventCreateWithoutCreatedByInput[] | LicitacaoEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutCreatedByInput | LicitacaoEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: LicitacaoEventCreateManyCreatedByInputEnvelope
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompanyUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByInput | CompanyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByInput | CompanyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByInput | CompanyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type LicitacaoEventUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput> | LicitacaoEventCreateWithoutCreatedByInput[] | LicitacaoEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutCreatedByInput | LicitacaoEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: LicitacaoEventUpsertWithWhereUniqueWithoutCreatedByInput | LicitacaoEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LicitacaoEventCreateManyCreatedByInputEnvelope
    set?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    disconnect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    delete?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    update?: LicitacaoEventUpdateWithWhereUniqueWithoutCreatedByInput | LicitacaoEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LicitacaoEventUpdateManyWithWhereWithoutCreatedByInput | LicitacaoEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByInput | CompanyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByInput | CompanyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByInput | CompanyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type LicitacaoEventUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput> | LicitacaoEventCreateWithoutCreatedByInput[] | LicitacaoEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutCreatedByInput | LicitacaoEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: LicitacaoEventUpsertWithWhereUniqueWithoutCreatedByInput | LicitacaoEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LicitacaoEventCreateManyCreatedByInputEnvelope
    set?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    disconnect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    delete?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    update?: LicitacaoEventUpdateWithWhereUniqueWithoutCreatedByInput | LicitacaoEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LicitacaoEventUpdateManyWithWhereWithoutCreatedByInput | LicitacaoEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
  }

  export type AppUserCreateNestedOneWithoutCreatedCompaniesInput = {
    create?: XOR<AppUserCreateWithoutCreatedCompaniesInput, AppUserUncheckedCreateWithoutCreatedCompaniesInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutCreatedCompaniesInput
    connect?: AppUserWhereUniqueInput
  }

  export type CompanyMemberCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type CompanyDocumentCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput> | CompanyDocumentCreateWithoutCompanyInput[] | CompanyDocumentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyDocumentCreateOrConnectWithoutCompanyInput | CompanyDocumentCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyDocumentCreateManyCompanyInputEnvelope
    connect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
  }

  export type LicitacaoCreateNestedManyWithoutCompanyInput = {
    create?: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput> | LicitacaoCreateWithoutCompanyInput[] | LicitacaoUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: LicitacaoCreateOrConnectWithoutCompanyInput | LicitacaoCreateOrConnectWithoutCompanyInput[]
    createMany?: LicitacaoCreateManyCompanyInputEnvelope
    connect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type CompanyDocumentUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput> | CompanyDocumentCreateWithoutCompanyInput[] | CompanyDocumentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyDocumentCreateOrConnectWithoutCompanyInput | CompanyDocumentCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyDocumentCreateManyCompanyInputEnvelope
    connect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
  }

  export type LicitacaoUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput> | LicitacaoCreateWithoutCompanyInput[] | LicitacaoUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: LicitacaoCreateOrConnectWithoutCompanyInput | LicitacaoCreateOrConnectWithoutCompanyInput[]
    createMany?: LicitacaoCreateManyCompanyInputEnvelope
    connect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AppUserUpdateOneRequiredWithoutCreatedCompaniesNestedInput = {
    create?: XOR<AppUserCreateWithoutCreatedCompaniesInput, AppUserUncheckedCreateWithoutCreatedCompaniesInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutCreatedCompaniesInput
    upsert?: AppUserUpsertWithoutCreatedCompaniesInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutCreatedCompaniesInput, AppUserUpdateWithoutCreatedCompaniesInput>, AppUserUncheckedUpdateWithoutCreatedCompaniesInput>
  }

  export type CompanyMemberUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type CompanyDocumentUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput> | CompanyDocumentCreateWithoutCompanyInput[] | CompanyDocumentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyDocumentCreateOrConnectWithoutCompanyInput | CompanyDocumentCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyDocumentUpsertWithWhereUniqueWithoutCompanyInput | CompanyDocumentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyDocumentCreateManyCompanyInputEnvelope
    set?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    disconnect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    delete?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    connect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    update?: CompanyDocumentUpdateWithWhereUniqueWithoutCompanyInput | CompanyDocumentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyDocumentUpdateManyWithWhereWithoutCompanyInput | CompanyDocumentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyDocumentScalarWhereInput | CompanyDocumentScalarWhereInput[]
  }

  export type LicitacaoUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput> | LicitacaoCreateWithoutCompanyInput[] | LicitacaoUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: LicitacaoCreateOrConnectWithoutCompanyInput | LicitacaoCreateOrConnectWithoutCompanyInput[]
    upsert?: LicitacaoUpsertWithWhereUniqueWithoutCompanyInput | LicitacaoUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: LicitacaoCreateManyCompanyInputEnvelope
    set?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    disconnect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    delete?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    connect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    update?: LicitacaoUpdateWithWhereUniqueWithoutCompanyInput | LicitacaoUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: LicitacaoUpdateManyWithWhereWithoutCompanyInput | LicitacaoUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: LicitacaoScalarWhereInput | LicitacaoScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type CompanyDocumentUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput> | CompanyDocumentCreateWithoutCompanyInput[] | CompanyDocumentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyDocumentCreateOrConnectWithoutCompanyInput | CompanyDocumentCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyDocumentUpsertWithWhereUniqueWithoutCompanyInput | CompanyDocumentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyDocumentCreateManyCompanyInputEnvelope
    set?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    disconnect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    delete?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    connect?: CompanyDocumentWhereUniqueInput | CompanyDocumentWhereUniqueInput[]
    update?: CompanyDocumentUpdateWithWhereUniqueWithoutCompanyInput | CompanyDocumentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyDocumentUpdateManyWithWhereWithoutCompanyInput | CompanyDocumentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyDocumentScalarWhereInput | CompanyDocumentScalarWhereInput[]
  }

  export type LicitacaoUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput> | LicitacaoCreateWithoutCompanyInput[] | LicitacaoUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: LicitacaoCreateOrConnectWithoutCompanyInput | LicitacaoCreateOrConnectWithoutCompanyInput[]
    upsert?: LicitacaoUpsertWithWhereUniqueWithoutCompanyInput | LicitacaoUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: LicitacaoCreateManyCompanyInputEnvelope
    set?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    disconnect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    delete?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    connect?: LicitacaoWhereUniqueInput | LicitacaoWhereUniqueInput[]
    update?: LicitacaoUpdateWithWhereUniqueWithoutCompanyInput | LicitacaoUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: LicitacaoUpdateManyWithWhereWithoutCompanyInput | LicitacaoUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: LicitacaoScalarWhereInput | LicitacaoScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutMembersInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    connect?: CompanyWhereUniqueInput
  }

  export type AppUserCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<AppUserCreateWithoutMembershipsInput, AppUserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutMembershipsInput
    connect?: AppUserWhereUniqueInput
  }

  export type EnumRoleCompanyFieldUpdateOperationsInput = {
    set?: $Enums.RoleCompany
  }

  export type CompanyUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    upsert?: CompanyUpsertWithoutMembersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutMembersInput, CompanyUpdateWithoutMembersInput>, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type AppUserUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<AppUserCreateWithoutMembershipsInput, AppUserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutMembershipsInput
    upsert?: AppUserUpsertWithoutMembershipsInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutMembershipsInput, AppUserUpdateWithoutMembershipsInput>, AppUserUncheckedUpdateWithoutMembershipsInput>
  }

  export type CompanyCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<CompanyCreateWithoutDocumentsInput, CompanyUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDocumentsInput
    connect?: CompanyWhereUniqueInput
  }

  export type EnumCompanyDocTypeFieldUpdateOperationsInput = {
    set?: $Enums.CompanyDocType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<CompanyCreateWithoutDocumentsInput, CompanyUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDocumentsInput
    upsert?: CompanyUpsertWithoutDocumentsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDocumentsInput, CompanyUpdateWithoutDocumentsInput>, CompanyUncheckedUpdateWithoutDocumentsInput>
  }

  export type CompanyCreateNestedOneWithoutLicitacoesInput = {
    create?: XOR<CompanyCreateWithoutLicitacoesInput, CompanyUncheckedCreateWithoutLicitacoesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutLicitacoesInput
    connect?: CompanyWhereUniqueInput
  }

  export type LicitacaoDocumentCreateNestedManyWithoutLicitacaoInput = {
    create?: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput> | LicitacaoDocumentCreateWithoutLicitacaoInput[] | LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput | LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput[]
    createMany?: LicitacaoDocumentCreateManyLicitacaoInputEnvelope
    connect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
  }

  export type LicitacaoEventCreateNestedManyWithoutLicitacaoInput = {
    create?: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput> | LicitacaoEventCreateWithoutLicitacaoInput[] | LicitacaoEventUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutLicitacaoInput | LicitacaoEventCreateOrConnectWithoutLicitacaoInput[]
    createMany?: LicitacaoEventCreateManyLicitacaoInputEnvelope
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
  }

  export type LicitacaoDocumentUncheckedCreateNestedManyWithoutLicitacaoInput = {
    create?: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput> | LicitacaoDocumentCreateWithoutLicitacaoInput[] | LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput | LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput[]
    createMany?: LicitacaoDocumentCreateManyLicitacaoInputEnvelope
    connect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
  }

  export type LicitacaoEventUncheckedCreateNestedManyWithoutLicitacaoInput = {
    create?: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput> | LicitacaoEventCreateWithoutLicitacaoInput[] | LicitacaoEventUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutLicitacaoInput | LicitacaoEventCreateOrConnectWithoutLicitacaoInput[]
    createMany?: LicitacaoEventCreateManyLicitacaoInputEnvelope
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
  }

  export type EnumLicitacaoStatusFieldUpdateOperationsInput = {
    set?: $Enums.LicitacaoStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CompanyUpdateOneRequiredWithoutLicitacoesNestedInput = {
    create?: XOR<CompanyCreateWithoutLicitacoesInput, CompanyUncheckedCreateWithoutLicitacoesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutLicitacoesInput
    upsert?: CompanyUpsertWithoutLicitacoesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutLicitacoesInput, CompanyUpdateWithoutLicitacoesInput>, CompanyUncheckedUpdateWithoutLicitacoesInput>
  }

  export type LicitacaoDocumentUpdateManyWithoutLicitacaoNestedInput = {
    create?: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput> | LicitacaoDocumentCreateWithoutLicitacaoInput[] | LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput | LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput[]
    upsert?: LicitacaoDocumentUpsertWithWhereUniqueWithoutLicitacaoInput | LicitacaoDocumentUpsertWithWhereUniqueWithoutLicitacaoInput[]
    createMany?: LicitacaoDocumentCreateManyLicitacaoInputEnvelope
    set?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    disconnect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    delete?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    connect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    update?: LicitacaoDocumentUpdateWithWhereUniqueWithoutLicitacaoInput | LicitacaoDocumentUpdateWithWhereUniqueWithoutLicitacaoInput[]
    updateMany?: LicitacaoDocumentUpdateManyWithWhereWithoutLicitacaoInput | LicitacaoDocumentUpdateManyWithWhereWithoutLicitacaoInput[]
    deleteMany?: LicitacaoDocumentScalarWhereInput | LicitacaoDocumentScalarWhereInput[]
  }

  export type LicitacaoEventUpdateManyWithoutLicitacaoNestedInput = {
    create?: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput> | LicitacaoEventCreateWithoutLicitacaoInput[] | LicitacaoEventUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutLicitacaoInput | LicitacaoEventCreateOrConnectWithoutLicitacaoInput[]
    upsert?: LicitacaoEventUpsertWithWhereUniqueWithoutLicitacaoInput | LicitacaoEventUpsertWithWhereUniqueWithoutLicitacaoInput[]
    createMany?: LicitacaoEventCreateManyLicitacaoInputEnvelope
    set?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    disconnect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    delete?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    update?: LicitacaoEventUpdateWithWhereUniqueWithoutLicitacaoInput | LicitacaoEventUpdateWithWhereUniqueWithoutLicitacaoInput[]
    updateMany?: LicitacaoEventUpdateManyWithWhereWithoutLicitacaoInput | LicitacaoEventUpdateManyWithWhereWithoutLicitacaoInput[]
    deleteMany?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
  }

  export type LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoNestedInput = {
    create?: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput> | LicitacaoDocumentCreateWithoutLicitacaoInput[] | LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput | LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput[]
    upsert?: LicitacaoDocumentUpsertWithWhereUniqueWithoutLicitacaoInput | LicitacaoDocumentUpsertWithWhereUniqueWithoutLicitacaoInput[]
    createMany?: LicitacaoDocumentCreateManyLicitacaoInputEnvelope
    set?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    disconnect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    delete?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    connect?: LicitacaoDocumentWhereUniqueInput | LicitacaoDocumentWhereUniqueInput[]
    update?: LicitacaoDocumentUpdateWithWhereUniqueWithoutLicitacaoInput | LicitacaoDocumentUpdateWithWhereUniqueWithoutLicitacaoInput[]
    updateMany?: LicitacaoDocumentUpdateManyWithWhereWithoutLicitacaoInput | LicitacaoDocumentUpdateManyWithWhereWithoutLicitacaoInput[]
    deleteMany?: LicitacaoDocumentScalarWhereInput | LicitacaoDocumentScalarWhereInput[]
  }

  export type LicitacaoEventUncheckedUpdateManyWithoutLicitacaoNestedInput = {
    create?: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput> | LicitacaoEventCreateWithoutLicitacaoInput[] | LicitacaoEventUncheckedCreateWithoutLicitacaoInput[]
    connectOrCreate?: LicitacaoEventCreateOrConnectWithoutLicitacaoInput | LicitacaoEventCreateOrConnectWithoutLicitacaoInput[]
    upsert?: LicitacaoEventUpsertWithWhereUniqueWithoutLicitacaoInput | LicitacaoEventUpsertWithWhereUniqueWithoutLicitacaoInput[]
    createMany?: LicitacaoEventCreateManyLicitacaoInputEnvelope
    set?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    disconnect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    delete?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    connect?: LicitacaoEventWhereUniqueInput | LicitacaoEventWhereUniqueInput[]
    update?: LicitacaoEventUpdateWithWhereUniqueWithoutLicitacaoInput | LicitacaoEventUpdateWithWhereUniqueWithoutLicitacaoInput[]
    updateMany?: LicitacaoEventUpdateManyWithWhereWithoutLicitacaoInput | LicitacaoEventUpdateManyWithWhereWithoutLicitacaoInput[]
    deleteMany?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
  }

  export type LicitacaoCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<LicitacaoCreateWithoutDocumentsInput, LicitacaoUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LicitacaoCreateOrConnectWithoutDocumentsInput
    connect?: LicitacaoWhereUniqueInput
  }

  export type EnumLicitacaoDocTypeFieldUpdateOperationsInput = {
    set?: $Enums.LicitacaoDocType
  }

  export type LicitacaoUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<LicitacaoCreateWithoutDocumentsInput, LicitacaoUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LicitacaoCreateOrConnectWithoutDocumentsInput
    upsert?: LicitacaoUpsertWithoutDocumentsInput
    connect?: LicitacaoWhereUniqueInput
    update?: XOR<XOR<LicitacaoUpdateToOneWithWhereWithoutDocumentsInput, LicitacaoUpdateWithoutDocumentsInput>, LicitacaoUncheckedUpdateWithoutDocumentsInput>
  }

  export type LicitacaoCreateNestedOneWithoutEventsInput = {
    create?: XOR<LicitacaoCreateWithoutEventsInput, LicitacaoUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LicitacaoCreateOrConnectWithoutEventsInput
    connect?: LicitacaoWhereUniqueInput
  }

  export type AppUserCreateNestedOneWithoutEventsInput = {
    create?: XOR<AppUserCreateWithoutEventsInput, AppUserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutEventsInput
    connect?: AppUserWhereUniqueInput
  }

  export type NullableEnumLicitacaoStatusFieldUpdateOperationsInput = {
    set?: $Enums.LicitacaoStatus | null
  }

  export type LicitacaoUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<LicitacaoCreateWithoutEventsInput, LicitacaoUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LicitacaoCreateOrConnectWithoutEventsInput
    upsert?: LicitacaoUpsertWithoutEventsInput
    connect?: LicitacaoWhereUniqueInput
    update?: XOR<XOR<LicitacaoUpdateToOneWithWhereWithoutEventsInput, LicitacaoUpdateWithoutEventsInput>, LicitacaoUncheckedUpdateWithoutEventsInput>
  }

  export type AppUserUpdateOneWithoutEventsNestedInput = {
    create?: XOR<AppUserCreateWithoutEventsInput, AppUserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutEventsInput
    upsert?: AppUserUpsertWithoutEventsInput
    disconnect?: AppUserWhereInput | boolean
    delete?: AppUserWhereInput | boolean
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutEventsInput, AppUserUpdateWithoutEventsInput>, AppUserUncheckedUpdateWithoutEventsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleCompanyFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleCompany | EnumRoleCompanyFieldRefInput<$PrismaModel>
    in?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleCompanyFilter<$PrismaModel> | $Enums.RoleCompany
  }

  export type NestedEnumRoleCompanyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleCompany | EnumRoleCompanyFieldRefInput<$PrismaModel>
    in?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleCompany[] | ListEnumRoleCompanyFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleCompanyWithAggregatesFilter<$PrismaModel> | $Enums.RoleCompany
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleCompanyFilter<$PrismaModel>
    _max?: NestedEnumRoleCompanyFilter<$PrismaModel>
  }

  export type NestedEnumCompanyDocTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyDocType | EnumCompanyDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyDocTypeFilter<$PrismaModel> | $Enums.CompanyDocType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCompanyDocTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyDocType | EnumCompanyDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyDocType[] | ListEnumCompanyDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyDocTypeWithAggregatesFilter<$PrismaModel> | $Enums.CompanyDocType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyDocTypeFilter<$PrismaModel>
    _max?: NestedEnumCompanyDocTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumLicitacaoStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoStatusFilter<$PrismaModel> | $Enums.LicitacaoStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumLicitacaoStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoStatusWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoStatusFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumLicitacaoDocTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoDocType | EnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel> | $Enums.LicitacaoDocType
  }

  export type NestedEnumLicitacaoDocTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoDocType | EnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicitacaoDocType[] | ListEnumLicitacaoDocTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicitacaoDocTypeWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoDocType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoDocTypeFilter<$PrismaModel>
  }

  export type NestedEnumLicitacaoStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel> | $Enums.LicitacaoStatus | null
  }

  export type NestedEnumLicitacaoStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicitacaoStatus | EnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LicitacaoStatus[] | ListEnumLicitacaoStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLicitacaoStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.LicitacaoStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumLicitacaoStatusNullableFilter<$PrismaModel>
  }

  export type CompanyCreateWithoutCreatedByInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentUncheckedCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput>
  }

  export type CompanyCreateManyCreatedByInputEnvelope = {
    data: CompanyCreateManyCreatedByInput | CompanyCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CompanyMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
  }

  export type CompanyMemberUncheckedCreateWithoutUserInput = {
    id?: string
    companyId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateOrConnectWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberCreateManyUserInputEnvelope = {
    data: CompanyMemberCreateManyUserInput | CompanyMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LicitacaoEventCreateWithoutCreatedByInput = {
    id?: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    licitacao: LicitacaoCreateNestedOneWithoutEventsInput
  }

  export type LicitacaoEventUncheckedCreateWithoutCreatedByInput = {
    id?: string
    licitacaoId: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
  }

  export type LicitacaoEventCreateOrConnectWithoutCreatedByInput = {
    where: LicitacaoEventWhereUniqueInput
    create: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput>
  }

  export type LicitacaoEventCreateManyCreatedByInputEnvelope = {
    data: LicitacaoEventCreateManyCreatedByInput | LicitacaoEventCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutCreatedByInput, CompanyUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutCreatedByInput, CompanyUncheckedUpdateWithoutCreatedByInput>
  }

  export type CompanyUpdateManyWithWhereWithoutCreatedByInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    cnpj?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    logoPath?: StringNullableFilter<"Company"> | string | null
    letterheadPath?: StringNullableFilter<"Company"> | string | null
    active?: BoolFilter<"Company"> | boolean
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    createdById?: StringFilter<"Company"> | string
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutUserInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type CompanyMemberScalarWhereInput = {
    AND?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    OR?: CompanyMemberScalarWhereInput[]
    NOT?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    id?: StringFilter<"CompanyMember"> | string
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumRoleCompanyFilter<"CompanyMember"> | $Enums.RoleCompany
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
  }

  export type LicitacaoEventUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: LicitacaoEventWhereUniqueInput
    update: XOR<LicitacaoEventUpdateWithoutCreatedByInput, LicitacaoEventUncheckedUpdateWithoutCreatedByInput>
    create: XOR<LicitacaoEventCreateWithoutCreatedByInput, LicitacaoEventUncheckedCreateWithoutCreatedByInput>
  }

  export type LicitacaoEventUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: LicitacaoEventWhereUniqueInput
    data: XOR<LicitacaoEventUpdateWithoutCreatedByInput, LicitacaoEventUncheckedUpdateWithoutCreatedByInput>
  }

  export type LicitacaoEventUpdateManyWithWhereWithoutCreatedByInput = {
    where: LicitacaoEventScalarWhereInput
    data: XOR<LicitacaoEventUpdateManyMutationInput, LicitacaoEventUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type LicitacaoEventScalarWhereInput = {
    AND?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
    OR?: LicitacaoEventScalarWhereInput[]
    NOT?: LicitacaoEventScalarWhereInput | LicitacaoEventScalarWhereInput[]
    id?: StringFilter<"LicitacaoEvent"> | string
    licitacaoId?: StringFilter<"LicitacaoEvent"> | string
    eventAt?: DateTimeFilter<"LicitacaoEvent"> | Date | string
    oldStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    newStatus?: EnumLicitacaoStatusNullableFilter<"LicitacaoEvent"> | $Enums.LicitacaoStatus | null
    description?: StringNullableFilter<"LicitacaoEvent"> | string | null
    createdById?: StringNullableFilter<"LicitacaoEvent"> | string | null
  }

  export type AppUserCreateWithoutCreatedCompaniesInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memberships?: CompanyMemberCreateNestedManyWithoutUserInput
    events?: LicitacaoEventCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserUncheckedCreateWithoutCreatedCompaniesInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    memberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserCreateOrConnectWithoutCreatedCompaniesInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutCreatedCompaniesInput, AppUserUncheckedCreateWithoutCreatedCompaniesInput>
  }

  export type CompanyMemberCreateWithoutCompanyInput = {
    id?: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
    user: AppUserCreateNestedOneWithoutMembershipsInput
  }

  export type CompanyMemberUncheckedCreateWithoutCompanyInput = {
    id?: string
    userId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateOrConnectWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberCreateManyCompanyInputEnvelope = {
    data: CompanyMemberCreateManyCompanyInput | CompanyMemberCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyDocumentCreateWithoutCompanyInput = {
    id?: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyDocumentUncheckedCreateWithoutCompanyInput = {
    id?: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyDocumentCreateOrConnectWithoutCompanyInput = {
    where: CompanyDocumentWhereUniqueInput
    create: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyDocumentCreateManyCompanyInputEnvelope = {
    data: CompanyDocumentCreateManyCompanyInput | CompanyDocumentCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type LicitacaoCreateWithoutCompanyInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: LicitacaoDocumentCreateNestedManyWithoutLicitacaoInput
    events?: LicitacaoEventCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoUncheckedCreateWithoutCompanyInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: LicitacaoDocumentUncheckedCreateNestedManyWithoutLicitacaoInput
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoCreateOrConnectWithoutCompanyInput = {
    where: LicitacaoWhereUniqueInput
    create: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput>
  }

  export type LicitacaoCreateManyCompanyInputEnvelope = {
    data: LicitacaoCreateManyCompanyInput | LicitacaoCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AppUserUpsertWithoutCreatedCompaniesInput = {
    update: XOR<AppUserUpdateWithoutCreatedCompaniesInput, AppUserUncheckedUpdateWithoutCreatedCompaniesInput>
    create: XOR<AppUserCreateWithoutCreatedCompaniesInput, AppUserUncheckedCreateWithoutCreatedCompaniesInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutCreatedCompaniesInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutCreatedCompaniesInput, AppUserUncheckedUpdateWithoutCreatedCompaniesInput>
  }

  export type AppUserUpdateWithoutCreatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    events?: LicitacaoEventUpdateManyWithoutCreatedByNestedInput
  }

  export type AppUserUncheckedUpdateWithoutCreatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    events?: LicitacaoEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyDocumentUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyDocumentWhereUniqueInput
    update: XOR<CompanyDocumentUpdateWithoutCompanyInput, CompanyDocumentUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyDocumentCreateWithoutCompanyInput, CompanyDocumentUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyDocumentUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyDocumentWhereUniqueInput
    data: XOR<CompanyDocumentUpdateWithoutCompanyInput, CompanyDocumentUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyDocumentUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyDocumentScalarWhereInput
    data: XOR<CompanyDocumentUpdateManyMutationInput, CompanyDocumentUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyDocumentScalarWhereInput = {
    AND?: CompanyDocumentScalarWhereInput | CompanyDocumentScalarWhereInput[]
    OR?: CompanyDocumentScalarWhereInput[]
    NOT?: CompanyDocumentScalarWhereInput | CompanyDocumentScalarWhereInput[]
    id?: StringFilter<"CompanyDocument"> | string
    companyId?: StringFilter<"CompanyDocument"> | string
    docType?: EnumCompanyDocTypeFilter<"CompanyDocument"> | $Enums.CompanyDocType
    docNumber?: StringNullableFilter<"CompanyDocument"> | string | null
    issuer?: StringNullableFilter<"CompanyDocument"> | string | null
    issueDate?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"CompanyDocument"> | Date | string | null
    filePath?: StringNullableFilter<"CompanyDocument"> | string | null
    notes?: StringNullableFilter<"CompanyDocument"> | string | null
    version?: IntFilter<"CompanyDocument"> | number
    createdAt?: DateTimeFilter<"CompanyDocument"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyDocument"> | Date | string
  }

  export type LicitacaoUpsertWithWhereUniqueWithoutCompanyInput = {
    where: LicitacaoWhereUniqueInput
    update: XOR<LicitacaoUpdateWithoutCompanyInput, LicitacaoUncheckedUpdateWithoutCompanyInput>
    create: XOR<LicitacaoCreateWithoutCompanyInput, LicitacaoUncheckedCreateWithoutCompanyInput>
  }

  export type LicitacaoUpdateWithWhereUniqueWithoutCompanyInput = {
    where: LicitacaoWhereUniqueInput
    data: XOR<LicitacaoUpdateWithoutCompanyInput, LicitacaoUncheckedUpdateWithoutCompanyInput>
  }

  export type LicitacaoUpdateManyWithWhereWithoutCompanyInput = {
    where: LicitacaoScalarWhereInput
    data: XOR<LicitacaoUpdateManyMutationInput, LicitacaoUncheckedUpdateManyWithoutCompanyInput>
  }

  export type LicitacaoScalarWhereInput = {
    AND?: LicitacaoScalarWhereInput | LicitacaoScalarWhereInput[]
    OR?: LicitacaoScalarWhereInput[]
    NOT?: LicitacaoScalarWhereInput | LicitacaoScalarWhereInput[]
    id?: StringFilter<"Licitacao"> | string
    companyId?: StringFilter<"Licitacao"> | string
    title?: StringFilter<"Licitacao"> | string
    orgao?: StringNullableFilter<"Licitacao"> | string | null
    modalidade?: StringNullableFilter<"Licitacao"> | string | null
    editalUrl?: StringNullableFilter<"Licitacao"> | string | null
    sessionAt?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    submissionDeadline?: DateTimeNullableFilter<"Licitacao"> | Date | string | null
    status?: EnumLicitacaoStatusFilter<"Licitacao"> | $Enums.LicitacaoStatus
    saleValue?: DecimalNullableFilter<"Licitacao"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"Licitacao"> | string | null
    createdAt?: DateTimeFilter<"Licitacao"> | Date | string
    updatedAt?: DateTimeFilter<"Licitacao"> | Date | string
  }

  export type CompanyCreateWithoutMembersInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: AppUserCreateNestedOneWithoutCreatedCompaniesInput
    documents?: CompanyDocumentCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    documents?: CompanyDocumentUncheckedCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutMembersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
  }

  export type AppUserCreateWithoutMembershipsInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    events?: LicitacaoEventCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserUncheckedCreateWithoutMembershipsInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type AppUserCreateOrConnectWithoutMembershipsInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutMembershipsInput, AppUserUncheckedCreateWithoutMembershipsInput>
  }

  export type CompanyUpsertWithoutMembersInput = {
    update: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutMembersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type CompanyUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: AppUserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    documents?: CompanyDocumentUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: CompanyDocumentUncheckedUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type AppUserUpsertWithoutMembershipsInput = {
    update: XOR<AppUserUpdateWithoutMembershipsInput, AppUserUncheckedUpdateWithoutMembershipsInput>
    create: XOR<AppUserCreateWithoutMembershipsInput, AppUserUncheckedCreateWithoutMembershipsInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutMembershipsInput, AppUserUncheckedUpdateWithoutMembershipsInput>
  }

  export type AppUserUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    events?: LicitacaoEventUpdateManyWithoutCreatedByNestedInput
  }

  export type AppUserUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    events?: LicitacaoEventUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CompanyCreateWithoutDocumentsInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: AppUserCreateNestedOneWithoutCreatedCompaniesInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    licitacoes?: LicitacaoUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDocumentsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDocumentsInput, CompanyUncheckedCreateWithoutDocumentsInput>
  }

  export type CompanyUpsertWithoutDocumentsInput = {
    update: XOR<CompanyUpdateWithoutDocumentsInput, CompanyUncheckedUpdateWithoutDocumentsInput>
    create: XOR<CompanyCreateWithoutDocumentsInput, CompanyUncheckedCreateWithoutDocumentsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDocumentsInput, CompanyUncheckedUpdateWithoutDocumentsInput>
  }

  export type CompanyUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: AppUserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutLicitacoesInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: AppUserCreateNestedOneWithoutCreatedCompaniesInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutLicitacoesInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    documents?: CompanyDocumentUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutLicitacoesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutLicitacoesInput, CompanyUncheckedCreateWithoutLicitacoesInput>
  }

  export type LicitacaoDocumentCreateWithoutLicitacaoInput = {
    id?: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput = {
    id?: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoDocumentCreateOrConnectWithoutLicitacaoInput = {
    where: LicitacaoDocumentWhereUniqueInput
    create: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput>
  }

  export type LicitacaoDocumentCreateManyLicitacaoInputEnvelope = {
    data: LicitacaoDocumentCreateManyLicitacaoInput | LicitacaoDocumentCreateManyLicitacaoInput[]
    skipDuplicates?: boolean
  }

  export type LicitacaoEventCreateWithoutLicitacaoInput = {
    id?: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    createdBy?: AppUserCreateNestedOneWithoutEventsInput
  }

  export type LicitacaoEventUncheckedCreateWithoutLicitacaoInput = {
    id?: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    createdById?: string | null
  }

  export type LicitacaoEventCreateOrConnectWithoutLicitacaoInput = {
    where: LicitacaoEventWhereUniqueInput
    create: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput>
  }

  export type LicitacaoEventCreateManyLicitacaoInputEnvelope = {
    data: LicitacaoEventCreateManyLicitacaoInput | LicitacaoEventCreateManyLicitacaoInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutLicitacoesInput = {
    update: XOR<CompanyUpdateWithoutLicitacoesInput, CompanyUncheckedUpdateWithoutLicitacoesInput>
    create: XOR<CompanyCreateWithoutLicitacoesInput, CompanyUncheckedCreateWithoutLicitacoesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutLicitacoesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutLicitacoesInput, CompanyUncheckedUpdateWithoutLicitacoesInput>
  }

  export type CompanyUpdateWithoutLicitacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: AppUserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutLicitacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type LicitacaoDocumentUpsertWithWhereUniqueWithoutLicitacaoInput = {
    where: LicitacaoDocumentWhereUniqueInput
    update: XOR<LicitacaoDocumentUpdateWithoutLicitacaoInput, LicitacaoDocumentUncheckedUpdateWithoutLicitacaoInput>
    create: XOR<LicitacaoDocumentCreateWithoutLicitacaoInput, LicitacaoDocumentUncheckedCreateWithoutLicitacaoInput>
  }

  export type LicitacaoDocumentUpdateWithWhereUniqueWithoutLicitacaoInput = {
    where: LicitacaoDocumentWhereUniqueInput
    data: XOR<LicitacaoDocumentUpdateWithoutLicitacaoInput, LicitacaoDocumentUncheckedUpdateWithoutLicitacaoInput>
  }

  export type LicitacaoDocumentUpdateManyWithWhereWithoutLicitacaoInput = {
    where: LicitacaoDocumentScalarWhereInput
    data: XOR<LicitacaoDocumentUpdateManyMutationInput, LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoInput>
  }

  export type LicitacaoDocumentScalarWhereInput = {
    AND?: LicitacaoDocumentScalarWhereInput | LicitacaoDocumentScalarWhereInput[]
    OR?: LicitacaoDocumentScalarWhereInput[]
    NOT?: LicitacaoDocumentScalarWhereInput | LicitacaoDocumentScalarWhereInput[]
    id?: StringFilter<"LicitacaoDocument"> | string
    licitacaoId?: StringFilter<"LicitacaoDocument"> | string
    docType?: EnumLicitacaoDocTypeFilter<"LicitacaoDocument"> | $Enums.LicitacaoDocType
    required?: BoolFilter<"LicitacaoDocument"> | boolean
    submitted?: BoolFilter<"LicitacaoDocument"> | boolean
    signed?: BoolFilter<"LicitacaoDocument"> | boolean
    issueDate?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"LicitacaoDocument"> | Date | string | null
    filePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    generatedFromTemplate?: BoolFilter<"LicitacaoDocument"> | boolean
    templatePath?: StringNullableFilter<"LicitacaoDocument"> | string | null
    version?: IntFilter<"LicitacaoDocument"> | number
    notes?: StringNullableFilter<"LicitacaoDocument"> | string | null
    createdAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
    updatedAt?: DateTimeFilter<"LicitacaoDocument"> | Date | string
  }

  export type LicitacaoEventUpsertWithWhereUniqueWithoutLicitacaoInput = {
    where: LicitacaoEventWhereUniqueInput
    update: XOR<LicitacaoEventUpdateWithoutLicitacaoInput, LicitacaoEventUncheckedUpdateWithoutLicitacaoInput>
    create: XOR<LicitacaoEventCreateWithoutLicitacaoInput, LicitacaoEventUncheckedCreateWithoutLicitacaoInput>
  }

  export type LicitacaoEventUpdateWithWhereUniqueWithoutLicitacaoInput = {
    where: LicitacaoEventWhereUniqueInput
    data: XOR<LicitacaoEventUpdateWithoutLicitacaoInput, LicitacaoEventUncheckedUpdateWithoutLicitacaoInput>
  }

  export type LicitacaoEventUpdateManyWithWhereWithoutLicitacaoInput = {
    where: LicitacaoEventScalarWhereInput
    data: XOR<LicitacaoEventUpdateManyMutationInput, LicitacaoEventUncheckedUpdateManyWithoutLicitacaoInput>
  }

  export type LicitacaoCreateWithoutDocumentsInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutLicitacoesInput
    events?: LicitacaoEventCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoUncheckedCreateWithoutDocumentsInput = {
    id?: string
    companyId: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: LicitacaoEventUncheckedCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoCreateOrConnectWithoutDocumentsInput = {
    where: LicitacaoWhereUniqueInput
    create: XOR<LicitacaoCreateWithoutDocumentsInput, LicitacaoUncheckedCreateWithoutDocumentsInput>
  }

  export type LicitacaoUpsertWithoutDocumentsInput = {
    update: XOR<LicitacaoUpdateWithoutDocumentsInput, LicitacaoUncheckedUpdateWithoutDocumentsInput>
    create: XOR<LicitacaoCreateWithoutDocumentsInput, LicitacaoUncheckedCreateWithoutDocumentsInput>
    where?: LicitacaoWhereInput
  }

  export type LicitacaoUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: LicitacaoWhereInput
    data: XOR<LicitacaoUpdateWithoutDocumentsInput, LicitacaoUncheckedUpdateWithoutDocumentsInput>
  }

  export type LicitacaoUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutLicitacoesNestedInput
    events?: LicitacaoEventUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: LicitacaoEventUncheckedUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoCreateWithoutEventsInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutLicitacoesInput
    documents?: LicitacaoDocumentCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoUncheckedCreateWithoutEventsInput = {
    id?: string
    companyId: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: LicitacaoDocumentUncheckedCreateNestedManyWithoutLicitacaoInput
  }

  export type LicitacaoCreateOrConnectWithoutEventsInput = {
    where: LicitacaoWhereUniqueInput
    create: XOR<LicitacaoCreateWithoutEventsInput, LicitacaoUncheckedCreateWithoutEventsInput>
  }

  export type AppUserCreateWithoutEventsInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    memberships?: CompanyMemberCreateNestedManyWithoutUserInput
  }

  export type AppUserUncheckedCreateWithoutEventsInput = {
    id?: string
    fullName?: string | null
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    memberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type AppUserCreateOrConnectWithoutEventsInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutEventsInput, AppUserUncheckedCreateWithoutEventsInput>
  }

  export type LicitacaoUpsertWithoutEventsInput = {
    update: XOR<LicitacaoUpdateWithoutEventsInput, LicitacaoUncheckedUpdateWithoutEventsInput>
    create: XOR<LicitacaoCreateWithoutEventsInput, LicitacaoUncheckedCreateWithoutEventsInput>
    where?: LicitacaoWhereInput
  }

  export type LicitacaoUpdateToOneWithWhereWithoutEventsInput = {
    where?: LicitacaoWhereInput
    data: XOR<LicitacaoUpdateWithoutEventsInput, LicitacaoUncheckedUpdateWithoutEventsInput>
  }

  export type LicitacaoUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutLicitacoesNestedInput
    documents?: LicitacaoDocumentUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoNestedInput
  }

  export type AppUserUpsertWithoutEventsInput = {
    update: XOR<AppUserUpdateWithoutEventsInput, AppUserUncheckedUpdateWithoutEventsInput>
    create: XOR<AppUserCreateWithoutEventsInput, AppUserUncheckedCreateWithoutEventsInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutEventsInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutEventsInput, AppUserUncheckedUpdateWithoutEventsInput>
  }

  export type AppUserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    memberships?: CompanyMemberUpdateManyWithoutUserNestedInput
  }

  export type AppUserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    memberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateManyCreatedByInput = {
    id?: string
    name: string
    cnpj?: string | null
    phone?: string | null
    address?: string | null
    logoPath?: string | null
    letterheadPath?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateManyUserInput = {
    id?: string
    companyId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoEventCreateManyCreatedByInput = {
    id?: string
    licitacaoId: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
  }

  export type CompanyUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    documents?: CompanyDocumentUncheckedUpdateManyWithoutCompanyNestedInput
    licitacoes?: LicitacaoUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logoPath?: NullableStringFieldUpdateOperationsInput | string | null
    letterheadPath?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoEventUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    licitacao?: LicitacaoUpdateOneRequiredWithoutEventsNestedInput
  }

  export type LicitacaoEventUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicitacaoEventUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    licitacaoId?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyMemberCreateManyCompanyInput = {
    id?: string
    userId: string
    role?: $Enums.RoleCompany
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyDocumentCreateManyCompanyInput = {
    id?: string
    docType: $Enums.CompanyDocType
    docNumber?: string | null
    issuer?: string | null
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    notes?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoCreateManyCompanyInput = {
    id?: string
    title: string
    orgao?: string | null
    modalidade?: string | null
    editalUrl?: string | null
    sessionAt?: Date | string | null
    submissionDeadline?: Date | string | null
    status?: $Enums.LicitacaoStatus
    saleValue?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: AppUserUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleCompanyFieldUpdateOperationsInput | $Enums.RoleCompany
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyDocumentUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumCompanyDocTypeFieldUpdateOperationsInput | $Enums.CompanyDocType
    docNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuer?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: LicitacaoDocumentUpdateManyWithoutLicitacaoNestedInput
    events?: LicitacaoEventUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoNestedInput
    events?: LicitacaoEventUncheckedUpdateManyWithoutLicitacaoNestedInput
  }

  export type LicitacaoUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orgao?: NullableStringFieldUpdateOperationsInput | string | null
    modalidade?: NullableStringFieldUpdateOperationsInput | string | null
    editalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sessionAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus
    saleValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentCreateManyLicitacaoInput = {
    id?: string
    docType: $Enums.LicitacaoDocType
    required?: boolean
    submitted?: boolean
    signed?: boolean
    issueDate?: Date | string | null
    expiresAt?: Date | string | null
    filePath?: string | null
    generatedFromTemplate?: boolean
    templatePath?: string | null
    version?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicitacaoEventCreateManyLicitacaoInput = {
    id?: string
    eventAt?: Date | string
    oldStatus?: $Enums.LicitacaoStatus | null
    newStatus?: $Enums.LicitacaoStatus | null
    description?: string | null
    createdById?: string | null
  }

  export type LicitacaoDocumentUpdateWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentUncheckedUpdateWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoDocumentUncheckedUpdateManyWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    docType?: EnumLicitacaoDocTypeFieldUpdateOperationsInput | $Enums.LicitacaoDocType
    required?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    signed?: BoolFieldUpdateOperationsInput | boolean
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    generatedFromTemplate?: BoolFieldUpdateOperationsInput | boolean
    templatePath?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicitacaoEventUpdateWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: AppUserUpdateOneWithoutEventsNestedInput
  }

  export type LicitacaoEventUncheckedUpdateWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicitacaoEventUncheckedUpdateManyWithoutLicitacaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    newStatus?: NullableEnumLicitacaoStatusFieldUpdateOperationsInput | $Enums.LicitacaoStatus | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AppUserCountOutputTypeDefaultArgs instead
     */
    export type AppUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicitacaoCountOutputTypeDefaultArgs instead
     */
    export type LicitacaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicitacaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppUserDefaultArgs instead
     */
    export type AppUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyMemberDefaultArgs instead
     */
    export type CompanyMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDocumentDefaultArgs instead
     */
    export type CompanyDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicitacaoDefaultArgs instead
     */
    export type LicitacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicitacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicitacaoDocumentDefaultArgs instead
     */
    export type LicitacaoDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicitacaoDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicitacaoEventDefaultArgs instead
     */
    export type LicitacaoEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicitacaoEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}